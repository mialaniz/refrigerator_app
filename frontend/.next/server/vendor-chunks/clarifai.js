"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/clarifai";
exports.ids = ["vendor-chunks/clarifai"];
exports.modules = {

/***/ "(rsc)/./node_modules/clarifai/dist/App.js":
/*!*******************************************!*\
  !*** ./node_modules/clarifai/dist/App.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n\nvar _require = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    checkType = _require.checkType;\n\nvar Models = __webpack_require__(/*! ./Models */ \"(rsc)/./node_modules/clarifai/dist/Models.js\");\nvar Inputs = __webpack_require__(/*! ./Inputs */ \"(rsc)/./node_modules/clarifai/dist/Inputs.js\");\nvar Concepts = __webpack_require__(/*! ./Concepts */ \"(rsc)/./node_modules/clarifai/dist/Concepts.js\");\nvar Workflow = __webpack_require__(/*! ./Workflow */ \"(rsc)/./node_modules/clarifai/dist/Workflow.js\");\nvar Workflows = __webpack_require__(/*! ./Workflows */ \"(rsc)/./node_modules/clarifai/dist/Workflows.js\");\nvar Solutions = __webpack_require__(/*! ./solutions/Solutions */ \"(rsc)/./node_modules/clarifai/dist/solutions/Solutions.js\");\n\nvar _require2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require2.API,\n    ERRORS = _require2.ERRORS,\n    getBasePath = _require2.getBasePath;\n\nvar TOKEN_PATH = API.TOKEN_PATH;\n\n\nif (typeof window !== 'undefined' && !('Promise' in window)) {\n  window.Promise = __webpack_require__(/*! promise */ \"(rsc)/./node_modules/promise/index.js\");\n}\n\nif (typeof global !== 'undefined' && !('Promise' in global)) {\n  global.Promise = __webpack_require__(/*! promise */ \"(rsc)/./node_modules/promise/index.js\");\n}\n\n/**\n * top-level class that allows access to models, inputs and concepts\n * @class\n */\n\nvar App = function () {\n  function App(arg1, arg2, arg3) {\n    _classCallCheck(this, App);\n\n    var optionsObj = arg1;\n    if ((typeof arg1 === 'undefined' ? 'undefined' : _typeof(arg1)) !== 'object' || arg1 === null) {\n      optionsObj = arg3 || {};\n      optionsObj.clientId = arg1;\n      optionsObj.clientSecret = arg2;\n    }\n    this._validate(optionsObj);\n    this._init(optionsObj);\n  }\n\n  /**\n   * Gets a token from the API using client credentials\n   * @return {Promise(token, error)} A Promise that is fulfilled with the token string or rejected with an error\n   *\n   * @deprecated Please switch to using the API key.\n   */\n\n\n  _createClass(App, [{\n    key: 'getToken',\n    value: function getToken() {\n      return this._config.token();\n    }\n\n    /**\n     * Sets the token to use for the API\n     * @param {String}         _token    The token you are setting\n     * @return {Boolean}                 true if token has valid fields, false if not\n     *\n     * @deprecated Please switch to using the API key.\n     */\n\n  }, {\n    key: 'setToken',\n    value: function setToken(_token) {\n      var token = _token;\n      var now = new Date().getTime();\n      if (typeof _token === 'string') {\n        token = {\n          accessToken: _token,\n          expiresIn: 176400\n        };\n      } else {\n        token = {\n          accessToken: _token.access_token || _token.accessToken,\n          expiresIn: _token.expires_in || _token.expiresIn\n        };\n      }\n      if (token.accessToken && token.expiresIn || token.access_token && token.expires_in) {\n        if (!token.expireTime) {\n          token.expireTime = now + token.expiresIn * 1000;\n        }\n        this._config._token = token;\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: '_validate',\n    value: function _validate(_ref) {\n      var clientId = _ref.clientId,\n          clientSecret = _ref.clientSecret,\n          token = _ref.token,\n          apiKey = _ref.apiKey,\n          sessionToken = _ref.sessionToken;\n\n      if (clientId || clientSecret) {\n        console.warn('Client ID/secret has been deprecated. Please switch to using the API key. See here how to do ' + 'the switch: https://blog.clarifai.com/introducing-api-keys-a-safer-way-to-authenticate-your-applications');\n      }\n      if ((!clientId || !clientSecret) && !token && !apiKey && !sessionToken) {\n        throw ERRORS.paramsRequired(['apiKey']);\n      }\n    }\n  }, {\n    key: '_init',\n    value: function _init(options) {\n      var _this = this;\n\n      var apiEndpoint = options.apiEndpoint || process && process.env && process.env.API_ENDPOINT || 'https://api.clarifai.com';\n      this._config = {\n        apiEndpoint: apiEndpoint,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        apiKey: options.apiKey,\n        sessionToken: options.sessionToken,\n        basePath: getBasePath(apiEndpoint, options.userId, options.appId),\n        token: function token() {\n          return new Promise(function (resolve, reject) {\n            var now = new Date().getTime();\n            if (checkType(/Object/, _this._config._token) && _this._config._token.expireTime > now) {\n              resolve(_this._config._token);\n            } else {\n              _this._getToken(resolve, reject);\n            }\n          });\n        }\n      };\n      if (options.token) {\n        this.setToken(options.token);\n      }\n      this.models = new Models(this._config);\n      this.inputs = new Inputs(this._config);\n      this.concepts = new Concepts(this._config);\n      this.workflow = new Workflow(this._config);\n      this.workflows = new Workflows(this._config);\n      this.solutions = new Solutions(this._config);\n    }\n\n    /**\n     * @deprecated Please switch to using the API key.\n     */\n\n  }, {\n    key: '_getToken',\n    value: function _getToken(resolve, reject) {\n      var _this2 = this;\n\n      this._requestToken().then(function (response) {\n        if (response.status === 200) {\n          _this2.setToken(response.data);\n          resolve(_this2._config._token);\n        } else {\n          reject(response);\n        }\n      }, reject);\n    }\n\n    /**\n     * @deprecated Please switch to using the API key.\n     */\n\n  }, {\n    key: '_requestToken',\n    value: function _requestToken() {\n      var url = '' + this._config.basePath + TOKEN_PATH;\n      var clientId = this._config.clientId;\n      var clientSecret = this._config.clientSecret;\n      return axios({\n        'url': url,\n        'method': 'POST',\n        'auth': {\n          'username': clientId,\n          'password': clientSecret\n        }\n      });\n    }\n  }]);\n\n  return App;\n}();\n\nmodule.exports = App;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/App.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Concept.js":
/*!***********************************************!*\
  !*** ./node_modules/clarifai/dist/Concept.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * class representing a concept and its info\n * @class\n */\nvar Concept = function Concept(_config, data) {\n  _classCallCheck(this, Concept);\n\n  this.id = data.id;\n  this.name = data.name;\n  this.createdAt = data.created_at || data.createdAt;\n  this.appId = data.app_id || data.appId;\n  this.value = data.value || null;\n  this._config = _config;\n  this.rawData = data;\n};\n\n;\n\nmodule.exports = Concept;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9Db25jZXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtEQUFrRCwwQ0FBMEM7O0FBRTVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVmcmlnZXJhdG9yX2FwcC8uL25vZGVfbW9kdWxlcy9jbGFyaWZhaS9kaXN0L0NvbmNlcHQuanM/YWQ4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBjbGFzcyByZXByZXNlbnRpbmcgYSBjb25jZXB0IGFuZCBpdHMgaW5mb1xuICogQGNsYXNzXG4gKi9cbnZhciBDb25jZXB0ID0gZnVuY3Rpb24gQ29uY2VwdChfY29uZmlnLCBkYXRhKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25jZXB0KTtcblxuICB0aGlzLmlkID0gZGF0YS5pZDtcbiAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuICB0aGlzLmNyZWF0ZWRBdCA9IGRhdGEuY3JlYXRlZF9hdCB8fCBkYXRhLmNyZWF0ZWRBdDtcbiAgdGhpcy5hcHBJZCA9IGRhdGEuYXBwX2lkIHx8IGRhdGEuYXBwSWQ7XG4gIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlIHx8IG51bGw7XG4gIHRoaXMuX2NvbmZpZyA9IF9jb25maWc7XG4gIHRoaXMucmF3RGF0YSA9IGRhdGE7XG59O1xuXG47XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uY2VwdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Concept.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Concepts.js":
/*!************************************************!*\
  !*** ./node_modules/clarifai/dist/Concepts.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar Concept = __webpack_require__(/*! ./Concept */ \"(rsc)/./node_modules/clarifai/dist/Concept.js\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require.API,\n    replaceVars = _require.replaceVars;\n\nvar CONCEPTS_PATH = API.CONCEPTS_PATH,\n    CONCEPT_PATH = API.CONCEPT_PATH,\n    CONCEPT_SEARCH_PATH = API.CONCEPT_SEARCH_PATH;\n\nvar _require2 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require2.wrapToken,\n    formatConcept = _require2.formatConcept;\n\nvar _require3 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType;\n\n/**\n * class representing a collection of concepts\n * @class\n */\n\n\nvar Concepts = function () {\n  function Concepts(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Concepts);\n\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach(function (conceptData, index) {\n      _this[index] = new Concept(_this._config, conceptData);\n    });\n    this.length = rawData.length;\n  }\n\n  /**\n   * List all the concepts\n   * @param {object}     options     Object with keys explained below: (optional)\n   *    @param {number}    options.page        The page number (optional, default: 1)\n   *    @param {number}    options.perPage     Number of images to return per page (optional, default: 20)\n   * @return {Promise(Concepts, error)} A Promise that is fulfilled with a Concepts instance or rejected with an error\n   */\n\n\n  _createClass(Concepts, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              'page': options.page,\n              'per_page': options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this2._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * List a single concept given an id\n     * @param {String}     id          The concept's id\n     * @return {Promise(Concept, error)} A Promise that is fulfilled with a Concept instance or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this3 = this;\n\n      var url = '' + this._config.basePath + replaceVars(CONCEPT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concept(_this3._config, response.data.concept));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Add a list of concepts given an id and name\n     * @param {object|object[]}   concepts       Can be a single media object or an array of media objects\n     *   @param  {object|string}    concepts[].concept         If string, this is assumed to be the concept id. Otherwise, an object with the following attributes\n     *     @param  {object}           concepts[].concept.id      The new concept's id (Required)\n     *     @param  {object}           concepts[].concept.name    The new concept's name\n     * @return {Promise(Concepts, error)}             A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create() {\n      var _this4 = this;\n\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (checkType(/(Object|String)/, concepts)) {\n        concepts = [concepts];\n      }\n      var data = {\n        'concepts': concepts.map(formatConcept)\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this4._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Search for a concept given a name. A wildcard can be given (example: The name \"bo*\" will match with \"boat\" and \"bow\" given those concepts exist\n     * @param  {string}   name  The name of the concept to search for\n     * @return {Promise(Concepts, error)} A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search(name) {\n      var _this5 = this;\n\n      var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var url = '' + this._config.basePath + CONCEPT_SEARCH_PATH;\n      return wrapToken(this._config, function (headers) {\n        var params = {\n          'concept_query': { name: name, language: language }\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this5._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Update a concepts\n     * @param {object|object[]}   concepts       Can be a single concept object or an array of concept objects\n     *   @param  {object}           concepts[].concept         A concept object with the following attributes\n     *     @param  {object}           concepts[].concept.id      The concept's id (Required)\n     *     @param  {object}           concepts[].concept.name    The concept's new name\n     * @param {string}            [action=overwrite]  The action to use for the PATCH\n     * @return {Promise(Concepts, error)}             A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      var _this6 = this;\n\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'overwrite';\n\n      if (!checkType(/Array/, concepts)) {\n        concepts = [concepts];\n      }\n      var data = {\n        concepts: concepts,\n        action: action\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this6._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Concepts;\n}();\n\n;\n\nmodule.exports = Concepts;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Concepts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Input.js":
/*!*********************************************!*\
  !*** ./node_modules/clarifai/dist/Input.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar Concepts = __webpack_require__(/*! ./Concepts */ \"(rsc)/./node_modules/clarifai/dist/Concepts.js\");\nvar Regions = __webpack_require__(/*! ./Regions */ \"(rsc)/./node_modules/clarifai/dist/Regions.js\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require.API;\n\nvar INPUTS_PATH = API.INPUTS_PATH;\n\n/**\n * class representing an input\n * @class\n */\n\nvar Input = function () {\n  function Input(_config, data) {\n    _classCallCheck(this, Input);\n\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = { geoPoint: data.data.geo['geo_point'] };\n    }\n    this.rawData = data;\n    this._config = _config;\n  }\n\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  _createClass(Input, [{\n    key: 'mergeConcepts',\n    value: function mergeConcepts(concepts, metadata) {\n      return this._update('merge', concepts, metadata);\n    }\n\n    /**\n     * Delete concept from an input\n     * @param {object[]}         concepts    Object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id        The concept id (required)\n     *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(concepts, metadata) {\n      return this._update('remove', concepts, metadata);\n    }\n\n    /**\n     * Overwrite inputs\n     * @param {object[]}         concepts                      Array of object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id         The concept id (required)\n     *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(concepts, metadata) {\n      return this._update('overwrite', concepts, metadata);\n    }\n  }, {\n    key: '_update',\n    value: function _update(action) {\n      var concepts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputData = {};\n      if (concepts.length) {\n        inputData.concepts = concepts;\n      }\n      if (metadata !== null) {\n        inputData.metadata = metadata;\n      }\n      var data = {\n        action: action,\n        inputs: [{\n          id: this.id,\n          data: inputData\n        }]\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          return axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Input;\n}();\n\n;\n\nmodule.exports = Input;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Input.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Inputs.js":
/*!**********************************************!*\
  !*** ./node_modules/clarifai/dist/Inputs.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar Input = __webpack_require__(/*! ./Input */ \"(rsc)/./node_modules/clarifai/dist/Input.js\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require.API,\n    ERRORS = _require.ERRORS,\n    MAX_BATCH_SIZE = _require.MAX_BATCH_SIZE,\n    replaceVars = _require.replaceVars;\n\nvar INPUT_PATH = API.INPUT_PATH,\n    INPUTS_PATH = API.INPUTS_PATH,\n    INPUTS_STATUS_PATH = API.INPUTS_STATUS_PATH,\n    SEARCH_PATH = API.SEARCH_PATH,\n    SEARCH_FEEDBACK_PATH = API.SEARCH_FEEDBACK_PATH;\n\nvar _require2 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require2.wrapToken,\n    formatInput = _require2.formatInput,\n    formatImagesSearch = _require2.formatImagesSearch,\n    formatConceptsSearch = _require2.formatConceptsSearch;\n\nvar _require3 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType,\n    clone = _require3.clone;\n\n/**\n * class representing a collection of inputs\n * @class\n */\n\n\nvar Inputs = function () {\n  function Inputs(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Inputs);\n\n    this.rawData = rawData;\n    rawData.forEach(function (inputData, index) {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n      _this[index] = new Input(_this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  _createClass(Inputs, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              page: options.page,\n              per_page: options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this2._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Adds an input or multiple inputs\n     * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n     *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *     @param {string}                 inputs[].input.id                     ID of input (optional)\n     *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n     *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n     *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n     *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n     *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n     *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n     *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n     *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create(inputs) {\n      var _this3 = this;\n\n      if (checkType(/(String|Object)/, inputs)) {\n        inputs = [inputs];\n      }\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      if (inputs.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      return wrapToken(this._config, function (headers) {\n        var data = {\n          inputs: inputs.map(formatInput)\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this3._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get input by id\n     * @param {String}    id  The input id\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this4 = this;\n\n      var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(_this4._config, response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Delete an input or a list of inputs by id or all inputs if no id is passed\n     * @param {string|string[]}    id           The id of input to delete (optional)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var val = void 0;\n      // delete an input\n      if (checkType(/String/, id)) {\n        var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n        val = wrapToken(this._config, function (headers) {\n          return axios.delete(url, { headers: headers });\n        });\n      } else {\n        val = this._deleteInputs(id);\n      }\n      return val;\n    }\n  }, {\n    key: '_deleteInputs',\n    value: function _deleteInputs() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        var data = id === null ? { delete_all: true } : { ids: id };\n        return axios({\n          url: url,\n          method: 'delete',\n          headers: headers,\n          data: data\n        });\n      });\n    }\n\n    /**\n     * Merge concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id        The id of the input to update\n     *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'mergeConcepts',\n    value: function mergeConcepts(inputs) {\n      inputs.action = 'merge';\n      return this.update(inputs);\n    }\n\n    /**\n     * Delete concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(inputs) {\n      inputs.action = 'remove';\n      return this.update(inputs);\n    }\n\n    /**\n     * Overwrite inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(inputs) {\n      inputs.action = 'overwrite';\n      return this.update(inputs);\n    }\n\n    /**\n     * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n     *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n     *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update(inputs) {\n      var _this5 = this;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputsList = Array.isArray(inputs) ? inputs : [inputs];\n      if (inputsList.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      var data = {\n        action: inputs.action,\n        inputs: inputsList.map(function (input) {\n          return formatInput(input, false);\n        })\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this5._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Search for inputs or outputs based on concepts or images\n     *   @param {object[]}               queries          List of all predictions to match with\n     *     @param {object}                 queries[].concept            An object with the following keys:\n     *       @param {string}                 queries[].concept.id          The concept id\n     *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].concept.name        The concept name\n     *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n     *     @param {object}                 queries[].input              An image object that contains the following keys:\n     *       @param {string}                 queries[].input.id            The input id\n     *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n     * @param {Object}                   options       Object with keys explained below: (optional)\n     *    @param {Number}                  options.page          The page number (optional, default: 1)\n     *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search() {\n      var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { page: 1, perPage: 20 };\n\n      var formattedAnds = [];\n      var url = '' + this._config.basePath + SEARCH_PATH;\n      var data = {\n        query: {\n          ands: []\n        },\n        pagination: {\n          page: options.page,\n          per_page: options.perPage\n        }\n      };\n\n      if (!Array.isArray(queries)) {\n        queries = [queries];\n      }\n      if (queries.length > 0) {\n        queries.forEach(function (query) {\n          if (query.input) {\n            formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n          } else if (query.concept) {\n            formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n          }\n        });\n        data.query.ands = formattedAnds;\n      }\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var _data = clone(response.data);\n              _data.rawData = clone(response.data);\n              resolve(_data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'searchFeedback',\n    value: function searchFeedback(inputID, searchID, endUserID, sessionID) {\n      var url = '' + this._config.basePath + SEARCH_FEEDBACK_PATH;\n      var body = {\n        input: {\n          id: inputID,\n          feedback_info: {\n            event_type: 'search_click',\n            search_id: searchID,\n            end_user_id: endUserID,\n            session_id: sessionID\n          }\n        }\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (_ref) {\n            var data = _ref.data;\n\n            var d = clone(data);\n            d.rawData = clone(data);\n            resolve(d);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get inputs status (number of uploaded, in process or failed inputs)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getStatus',\n    value: function getStatus() {\n      var url = '' + this._config.basePath + INPUTS_STATUS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Inputs;\n}();\n\n;\n\nmodule.exports = Inputs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Inputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Model.js":
/*!*********************************************!*\
  !*** ./node_modules/clarifai/dist/Model.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar ModelVersion = __webpack_require__(/*! ./ModelVersion */ \"(rsc)/./node_modules/clarifai/dist/ModelVersion.js\");\n\nvar _require = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    isSuccess = _require.isSuccess,\n    checkType = _require.checkType,\n    clone = _require.clone;\n\nvar _require2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require2.API,\n    SYNC_TIMEOUT = _require2.SYNC_TIMEOUT,\n    replaceVars = _require2.replaceVars,\n    STATUS = _require2.STATUS,\n    POLLTIME = _require2.POLLTIME;\n\nvar MODEL_QUEUED_FOR_TRAINING = STATUS.MODEL_QUEUED_FOR_TRAINING,\n    MODEL_TRAINING = STATUS.MODEL_TRAINING;\n\nvar _require3 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require3.wrapToken,\n    formatMediaPredict = _require3.formatMediaPredict,\n    formatModel = _require3.formatModel,\n    formatObjectForSnakeCase = _require3.formatObjectForSnakeCase;\n\nvar MODEL_VERSIONS_PATH = API.MODEL_VERSIONS_PATH,\n    MODEL_VERSION_PATH = API.MODEL_VERSION_PATH,\n    MODELS_PATH = API.MODELS_PATH,\n    MODEL_FEEDBACK_PATH = API.MODEL_FEEDBACK_PATH,\n    MODEL_VERSION_FEEDBACK_PATH = API.MODEL_VERSION_FEEDBACK_PATH,\n    PREDICT_PATH = API.PREDICT_PATH,\n    VERSION_PREDICT_PATH = API.VERSION_PREDICT_PATH,\n    MODEL_INPUTS_PATH = API.MODEL_INPUTS_PATH,\n    MODEL_VERSION_OUTPUT_PATH = API.MODEL_VERSION_OUTPUT_PATH,\n    MODEL_OUTPUT_PATH = API.MODEL_OUTPUT_PATH,\n    MODEL_VERSION_INPUTS_PATH = API.MODEL_VERSION_INPUTS_PATH,\n    MODEL_VERSION_METRICS_PATH = API.MODEL_VERSION_METRICS_PATH;\n\n/**\n * class representing a model\n * @class\n */\n\nvar Model = function () {\n  function Model(_config, data) {\n    _classCallCheck(this, Model);\n\n    this._config = _config;\n    this.name = data.name;\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.appId = data.app_id || data.appId;\n    this.outputInfo = data.output_info || data.outputInfo;\n    if (checkType(/(String)/, data.version)) {\n      this.modelVersion = {};\n      this.versionId = data.version;\n    } else {\n      if (data.model_version || data.modelVersion || data.version) {\n        this.modelVersion = new ModelVersion(this._config, data.model_version || data.modelVersion || data.version);\n      }\n      this.versionId = (this.modelVersion || {}).id;\n    }\n    this.rawData = data;\n  }\n\n  /**\n   * Merge concepts to a model\n   * @param {object[]}      concepts    List of concept objects with id\n   * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n   */\n\n\n  _createClass(Model, [{\n    key: 'mergeConcepts',\n    value: function mergeConcepts() {\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var conceptsArr = Array.isArray(concepts) ? concepts : [concepts];\n      return this.update({ action: 'merge', concepts: conceptsArr });\n    }\n\n    /**\n     * Remove concepts from a model\n     * @param {object[]}      concepts    List of concept objects with id\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts() {\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var conceptsArr = Array.isArray(concepts) ? concepts : [concepts];\n      return this.update({ action: 'remove', concepts: conceptsArr });\n    }\n\n    /**\n     * Overwrite concepts in a model\n     * @param {object[]}      concepts    List of concept objects with id\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts() {\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var conceptsArr = Array.isArray(concepts) ? concepts : [concepts];\n      return this.update({ action: 'overwrite', concepts: conceptsArr });\n    }\n\n    /**\n     * Start a model evaluation job\n     * @return {Promise(ModelVersion, error)} A Promise that is fulfilled with a ModelVersion instance or rejected with an error\n     */\n\n  }, {\n    key: 'runModelEval',\n    value: function runModelEval() {\n      var _this = this;\n\n      var url = '' + this._config.basePath + replaceVars(MODEL_VERSION_METRICS_PATH, [this.id, this.versionId]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, {}, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new ModelVersion(_this._config, response.data.model_version));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Update a model's output config or concepts\n     * @param {object}               model                                 An object with any of the following attrs:\n     *   @param {string}               name                                  The new name of the model to update with\n     *   @param {boolean}              conceptsMutuallyExclusive             Do you expect to see more than one of the concepts in this model in the SAME image? Set to false (default) if so. Otherwise, set to true.\n     *   @param {boolean}              closedEnvironment                     Do you expect to run the trained model on images that do not contain ANY of the concepts in the model? Set to false (default) if so. Otherwise, set to true.\n     *   @param {object[]}             concepts                              An array of concept objects or string\n     *     @param {object|string}        concepts[].concept                    If string is given, this is interpreted as concept id. Otherwise, if object is given, client expects the following attributes\n     *       @param {string}             concepts[].concept.id                   The id of the concept to attach to the model\n     *   @param {object[]}             action                                The action to perform on the given concepts. Possible values are 'merge', 'remove', or 'overwrite'. Default: 'merge'\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update(obj) {\n      var _this2 = this;\n\n      var url = '' + this._config.basePath + MODELS_PATH;\n      var modelData = [obj];\n      var data = { models: modelData.map(function (m) {\n          return formatModel(Object.assign(m, { id: _this2.id }));\n        }) };\n      if (Array.isArray(obj.concepts)) {\n        data['action'] = obj.action || 'merge';\n      }\n\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Model(_this2._config, response.data.models[0]));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Create a new model version\n     * @param {boolean}       sync     If true, this returns after model has completely trained. If false, this immediately returns default api response.\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'train',\n    value: function train(sync) {\n      var _this3 = this;\n\n      var url = '' + this._config.basePath + replaceVars(MODEL_VERSIONS_PATH, [this.id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, null, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              // Training produces a new model version ID.\n              _this3.versionId = response.data.model.model_version.id;\n\n              if (sync) {\n                var timeStart = Date.now();\n                _this3._pollTrain.bind(_this3)(timeStart, resolve, reject);\n              } else {\n                resolve(new Model(_this3._config, response.data.model));\n              }\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: '_pollTrain',\n    value: function _pollTrain(timeStart, resolve, reject) {\n      var _this4 = this;\n\n      clearTimeout(this.pollTimeout);\n      if (Date.now() - timeStart >= SYNC_TIMEOUT) {\n        return reject({\n          status: 'Error',\n          message: 'Sync call timed out'\n        });\n      }\n      this.getOutputInfo().then(function (model) {\n        var modelStatusCode = model.modelVersion.status.code.toString();\n        if (modelStatusCode === MODEL_QUEUED_FOR_TRAINING || modelStatusCode === MODEL_TRAINING) {\n          _this4.pollTimeout = setTimeout(function () {\n            return _this4._pollTrain(timeStart, resolve, reject);\n          }, POLLTIME);\n        } else {\n          resolve(model);\n        }\n      }, reject).catch(reject);\n    }\n\n    /**\n     * Returns model ouputs according to inputs\n     * @param {object[]|object|string}       inputs    An array of objects/object/string pointing to an image resource. A string can either be a url or base64 image bytes. Object keys explained below:\n     *    @param {object}                      inputs[].image     Object with keys explained below:\n     *       @param {string}                     inputs[].image.(url|base64)   Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *       @param {number[]}                   inputs[].image.crop           An array containing the percent to be cropped from top, left, bottom and right (optional)\n     * @param {object|string} config An object with keys explained below. If a string is passed instead, it will be treated as the language (backwards compatibility)\n     *   @param {string} config.language A string code representing the language to return results in (example: 'zh' for simplified Chinese, 'ru' for Russian, 'ja' for Japanese)\n     *   @param {boolean} config.video indicates if the input should be processed as a video\n     *   @param {object[]} config.selectConcepts An array of concepts to return. Each object in the array will have a form of {name: <CONCEPT_NAME>} or {id: CONCEPT_ID}\n     *   @param {float} config.minValue The minimum confidence threshold that a result must meet. From 0.0 to 1.0\n     *   @param {number} config.maxConcepts The maximum number of concepts to return\n     * @param {boolean} isVideo  Deprecated: indicates if the input should be processed as a video (default false). Deprecated in favor of using config object\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'predict',\n    value: function predict(inputs) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var isVideo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (checkType(/String/, config)) {\n        console.warn('passing the language as a string is deprecated, consider using the configuration object instead');\n        config = {\n          language: config\n        };\n      }\n\n      if (isVideo) {\n        console.warn('\"isVideo\" argument is deprecated, consider using the configuration object instead');\n        config.video = isVideo;\n      }\n      var video = config.video || false;\n      delete config.video;\n      if (checkType(/(Object|String)/, inputs)) {\n        inputs = [inputs];\n      }\n      var url = '' + this._config.basePath + (this.versionId ? replaceVars(VERSION_PREDICT_PATH, [this.id, this.versionId]) : replaceVars(PREDICT_PATH, [this.id]));\n      return wrapToken(this._config, function (headers) {\n        var params = { inputs: inputs.map(function (input) {\n            return formatMediaPredict(input, video ? 'video' : 'image');\n          }) };\n        if (config && Object.getOwnPropertyNames(config).length > 0) {\n          params['model'] = {\n            output_info: {\n              output_config: formatObjectForSnakeCase(config)\n            }\n          };\n        }\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, { headers: headers }).then(function (response) {\n            var data = clone(response.data);\n            data.rawData = clone(response.data);\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Returns a version of the model specified by its id\n     * @param {string}     versionId   The model's id\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getVersion',\n    value: function getVersion(versionId) {\n      // TODO(Rok) MEDIUM: The version ID isn't URI encoded, as opposed to the model ID. This should probably be\n      //  consistent - i.e. the same in both cases.\n      var url = '' + this._config.basePath + replaceVars(MODEL_VERSION_PATH, [this.id, versionId]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            var data = clone(response.data);\n            data.rawData = clone(response.data);\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Returns a list of versions of the model\n     * @param {object}     options     Object with keys explained below: (optional)\n     *   @param {number}     options.page        The page number (optional, default: 1)\n     *   @param {number}     options.perPage     Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getVersions',\n    value: function getVersions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + replaceVars(MODEL_VERSIONS_PATH, [this.id]);\n      return wrapToken(this._config, function (headers) {\n        var data = {\n          headers: headers,\n          params: { 'per_page': options.perPage, 'page': options.page }\n        };\n        return new Promise(function (resolve, reject) {\n          axios.get(url, data).then(function (response) {\n            var data = clone(response.data);\n            data.rawData = clone(response.data);\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Returns all the model's output info\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'getOutputInfo',\n    value: function getOutputInfo() {\n      var _this5 = this;\n\n      var url = '' + this._config.basePath + (this.versionId ? replaceVars(MODEL_VERSION_OUTPUT_PATH, [this.id, this.versionId]) : replaceVars(MODEL_OUTPUT_PATH, [this.id]));\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            resolve(new Model(_this5._config, response.data.model));\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Returns all the model's inputs\n     * @param {object}     options     Object with keys explained below: (optional)\n     *   @param {number}     options.page        The page number (optional, default: 1)\n     *   @param {number}     options.perPage     Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getInputs',\n    value: function getInputs() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + (this.versionId ? replaceVars(MODEL_VERSION_INPUTS_PATH, [this.id, this.versionId]) : replaceVars(MODEL_INPUTS_PATH, [this.id]));\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            params: { 'per_page': options.perPage, 'page': options.page },\n            headers: headers\n          }).then(function (response) {\n            var data = clone(response.data);\n            data.rawData = clone(response.data);\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     *\n     * @param {string} input A string pointing to an image resource. A string must be a url\n     * @param {object} config A configuration object consisting of the following required keys\n     *   @param {string} config.id The id of the feedback request\n     *   @param {object} config.data The feedback data to be sent\n     *   @param {object} config.info Meta data related to the feedback request\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'feedback',\n    value: function feedback(input, _ref) {\n      var id = _ref.id,\n          data = _ref.data,\n          info = _ref.info;\n\n      var url = '' + this._config.basePath + (this.versionId ? replaceVars(MODEL_VERSION_FEEDBACK_PATH, [this.id, this.versionId]) : replaceVars(MODEL_FEEDBACK_PATH, [this.id]));\n      var media = formatMediaPredict(input).data;\n      info.eventType = 'annotation';\n      var body = {\n        input: {\n          id: id,\n          data: Object.assign(media, data),\n          'feedback_info': formatObjectForSnakeCase(info)\n        }\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (_ref2) {\n            var data = _ref2.data;\n\n            var d = clone(data);\n            d.rawData = clone(data);\n            resolve(d);\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Model;\n}();\n\nmodule.exports = Model;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Model.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/ModelVersion.js":
/*!****************************************************!*\
  !*** ./node_modules/clarifai/dist/ModelVersion.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * class representing a version of a model\n * @class\n */\nvar ModelVersion = function ModelVersion(_config, data) {\n  _classCallCheck(this, ModelVersion);\n\n  this.id = data.id;\n  this.created_at = this.createdAt = data.created_at || data.createdAt;\n  this.status = data.status;\n  this.active_concept_count = data.active_concept_count;\n  this.metrics = data.metrics;\n  this._config = _config;\n  this.rawData = data;\n};\n\n;\n\nmodule.exports = ModelVersion;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9Nb2RlbFZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0RBQWtELDBDQUEwQzs7QUFFNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWZyaWdlcmF0b3JfYXBwLy4vbm9kZV9tb2R1bGVzL2NsYXJpZmFpL2Rpc3QvTW9kZWxWZXJzaW9uLmpzP2Q1MWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogY2xhc3MgcmVwcmVzZW50aW5nIGEgdmVyc2lvbiBvZiBhIG1vZGVsXG4gKiBAY2xhc3NcbiAqL1xudmFyIE1vZGVsVmVyc2lvbiA9IGZ1bmN0aW9uIE1vZGVsVmVyc2lvbihfY29uZmlnLCBkYXRhKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RlbFZlcnNpb24pO1xuXG4gIHRoaXMuaWQgPSBkYXRhLmlkO1xuICB0aGlzLmNyZWF0ZWRfYXQgPSB0aGlzLmNyZWF0ZWRBdCA9IGRhdGEuY3JlYXRlZF9hdCB8fCBkYXRhLmNyZWF0ZWRBdDtcbiAgdGhpcy5zdGF0dXMgPSBkYXRhLnN0YXR1cztcbiAgdGhpcy5hY3RpdmVfY29uY2VwdF9jb3VudCA9IGRhdGEuYWN0aXZlX2NvbmNlcHRfY291bnQ7XG4gIHRoaXMubWV0cmljcyA9IGRhdGEubWV0cmljcztcbiAgdGhpcy5fY29uZmlnID0gX2NvbmZpZztcbiAgdGhpcy5yYXdEYXRhID0gZGF0YTtcbn07XG5cbjtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RlbFZlcnNpb247Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/ModelVersion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Models.js":
/*!**********************************************!*\
  !*** ./node_modules/clarifai/dist/Models.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar Promise = __webpack_require__(/*! promise */ \"(rsc)/./node_modules/promise/index.js\");\nvar Model = __webpack_require__(/*! ./Model */ \"(rsc)/./node_modules/clarifai/dist/Model.js\");\nvar Concepts = __webpack_require__(/*! ./Concepts */ \"(rsc)/./node_modules/clarifai/dist/Concepts.js\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require.API,\n    ERRORS = _require.ERRORS,\n    replaceVars = _require.replaceVars;\n\nvar _require2 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    isSuccess = _require2.isSuccess,\n    checkType = _require2.checkType,\n    clone = _require2.clone;\n\nvar _require3 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require3.wrapToken,\n    formatModel = _require3.formatModel;\n\nvar MODELS_PATH = API.MODELS_PATH,\n    MODEL_PATH = API.MODEL_PATH,\n    MODEL_SEARCH_PATH = API.MODEL_SEARCH_PATH,\n    MODEL_VERSION_PATH = API.MODEL_VERSION_PATH;\n\n/**\n * class representing a collection of models\n * @class\n */\n\nvar Models = function () {\n  function Models(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Models);\n\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach(function (modelData, index) {\n      _this[index] = new Model(_this._config, modelData);\n    });\n    this.length = rawData.length;\n  }\n\n  /**\n   * Returns a Model instance given model id or name. It will call search if name is given.\n   * @param {string|object}    model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n   *   @param {string}           model.id          Model id\n   *   @param {string}           model.name        Model name\n   *   @param {string}           model.version     Model version\n   *   @param {string}           model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n   * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n   */\n\n\n  _createClass(Models, [{\n    key: 'initModel',\n    value: function initModel(model) {\n      var _this2 = this;\n\n      var data = {};\n      var fn = void 0;\n      if (checkType(/String/, model)) {\n        data.id = model;\n      } else {\n        data = model;\n      }\n      if (data.id) {\n        fn = function fn(resolve, reject) {\n          resolve(new Model(_this2._config, data));\n        };\n      } else {\n        fn = function fn(resolve, reject) {\n          _this2.search(data.name, data.type).then(function (models) {\n            if (data.version) {\n              resolve(models.rawData.filter(function (model) {\n                return model.modelVersion.id === data.version;\n              }));\n            } else {\n              resolve(models[0]);\n            }\n          }, reject).catch(reject);\n        };\n      }\n      return new Promise(fn);\n    }\n\n    /**\n     * Calls predict given model info and inputs to predict on\n     * @param {string|object}            model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                   model.id          Model id\n     *   @param {string}                   model.name        Model name\n     *   @param {string}                   model.version     Model version\n     *   @param {string}                   model.language    Model language (only for Clarifai's public models)\n     *   @param {string}                   model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @param {object[]|object|string}   inputs    An array of objects/object/string pointing to an image resource. A string can either be a url or base64 image bytes. Object keys explained below:\n     *    @param {object}                  inputs[].image     Object with keys explained below:\n     *       @param {string}                 inputs[].image.(url|base64)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     * @param {boolean} isVideo  indicates if the input should be processed as a video (default false)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'predict',\n    value: function predict(model, inputs) {\n      var _this3 = this;\n\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (checkType(/Boolean/, config)) {\n        console.warn('\"isVideo\" argument is deprecated, consider using the configuration object instead');\n        config = {\n          video: config\n        };\n      }\n      if (model.language) {\n        config.language = model.language;\n      }\n      return new Promise(function (resolve, reject) {\n        _this3.initModel(model).then(function (modelObj) {\n          modelObj.predict(inputs, config).then(resolve, reject).catch(reject);\n        }, reject);\n      });\n    }\n\n    /**\n     * Calls train on a model and creates a new model version given model info\n     * @param {string|object}            model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                   model.id          Model id\n     *   @param {string}                   model.name        Model name\n     *   @param {string}                   model.version     Model version\n     *   @param {string}                   model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @param {boolean}                  sync        If true, this returns after model has completely trained. If false, this immediately returns default api response.\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'train',\n    value: function train(model) {\n      var _this4 = this;\n\n      var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      return new Promise(function (resolve, reject) {\n        _this4.initModel(model).then(function (model) {\n          model.train(sync).then(resolve, reject).catch(reject);\n        }, reject);\n      });\n    }\n\n    /**\n     *\n     * @param {string|object}            model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                   model.id          Model id\n     *   @param {string}                   model.name        Model name\n     *   @param {string}                   model.version     Model version\n     *   @param {string}                   model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @param {string} input A string pointing to an image resource. A string must be a url\n     * @param {object} config A configuration object consisting of the following required keys\n     *   @param {string} config.id The id of the feedback request\n     *   @param {object} config.data The feedback data to be sent\n     *   @param {object} config.info Meta data related to the feedback request\n     */\n\n  }, {\n    key: 'feedback',\n    value: function feedback(model, input, config) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this5.initModel(model).then(function (model) {\n          return model.feedback(input, config);\n        }).then(function (d) {\n          return resolve(d);\n        }).catch(function (e) {\n          return reject(e);\n        });\n      });\n    }\n\n    /**\n     * Returns a version of the model specified by its id\n     * @param {string|object}            model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                   model.id          Model id\n     *   @param {string}                   model.name        Model name\n     *   @param {string}                   model.version     Model version\n     *   @param {string}                   model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @param {string}     versionId   The model's id\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getVersion',\n    value: function getVersion(model, versionId) {\n      var _this6 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this6.initModel(model).then(function (model) {\n          model.getVersion(versionId).then(resolve, reject).catch(reject);\n        }, reject);\n      });\n    }\n\n    /**\n     * Returns a list of versions of the model\n     * @param {string|object}            model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                   model.id          Model id\n     *   @param {string}                   model.name        Model name\n     *   @param {string}                   model.version     Model version\n     *   @param {string}                   model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @param {object}                   options     Object with keys explained below: (optional)\n     *   @param {number}                   options.page        The page number (optional, default: 1)\n     *   @param {number}                   options.perPage     Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getVersions',\n    value: function getVersions(model) {\n      var _this7 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { page: 1, perPage: 20 };\n\n      return new Promise(function (resolve, reject) {\n        _this7.initModel(model).then(function (model) {\n          model.getVersions(options).then(resolve, reject).catch(reject);\n        }, reject);\n      });\n    }\n\n    /**\n     * Returns all the model's output info\n     * @param {string|object}            model       If string, it is assumed to be model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                   model.id          Model id\n     *   @param {string}                   model.name        Model name\n     *   @param {string}                   model.version     Model version\n     *   @param {string}                   model.type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @return {Promise(Model, error)} A Promise that is fulfilled with a Model instance or rejected with an error\n     */\n\n  }, {\n    key: 'getOutputInfo',\n    value: function getOutputInfo(model) {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this8.initModel(model).then(function (model) {\n          model.getOutputInfo().then(resolve, reject).catch(reject);\n        }, reject);\n      });\n    }\n\n    /**\n     * Returns all the models\n     * @param {Object}     options     Object with keys explained below: (optional)\n     *   @param {Number}     options.page        The page number (optional, default: 1)\n     *   @param {Number}     options.perPage     Number of images to return per page (optional, default: 20)\n     * @return {Promise(Models, error)} A Promise that is fulfilled with an instance of Models or rejected with an error\n     */\n\n  }, {\n    key: 'list',\n    value: function list() {\n      var _this9 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + MODELS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            params: { 'per_page': options.perPage, 'page': options.page },\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Models(_this9._config, response.data.models));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Create a model\n     * @param {string|object}                  model                                  If string, it is assumed to be the model id. Otherwise, if object is given, it can have any of the following keys:\n     *   @param {string}                         model.id                               Model id\n     *   @param {string}                         model.name                             Model name\n     * @param {object[]|string[]|Concepts[]}   conceptsData                           List of objects with ids, concept id strings or an instance of Concepts object\n     * @param {Object}                         options                                Object with keys explained below:\n     *   @param {boolean}                        options.conceptsMutuallyExclusive      Do you expect to see more than one of the concepts in this model in the SAME image? Set to false (default) if so. Otherwise, set to true.\n     *   @param {boolean}                        options.closedEnvironment              Do you expect to run the trained model on images that do not contain ANY of the concepts in the model? Set to false (default) if so. Otherwise, set to true.\n     * @return {Promise(Model, error)} A Promise that is fulfilled with an instance of Model or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create(model) {\n      var _this10 = this;\n\n      var conceptsData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var concepts = conceptsData instanceof Concepts ? conceptsData.toObject('id') : conceptsData.map(function (concept) {\n        var val = concept;\n        if (checkType(/String/, concept)) {\n          val = { 'id': concept };\n        }\n        return val;\n      });\n      var modelObj = model;\n      if (checkType(/String/, model)) {\n        modelObj = { id: model, name: model };\n      }\n      if (modelObj.id === undefined) {\n        throw ERRORS.paramsRequired('Model ID');\n      }\n      var url = '' + this._config.basePath + MODELS_PATH;\n      var data = { model: modelObj };\n      data['model']['output_info'] = {\n        'data': {\n          concepts: concepts\n        },\n        'output_config': {\n          'concepts_mutually_exclusive': !!options.conceptsMutuallyExclusive,\n          'closed_environment': !!options.closedEnvironment\n        }\n      };\n\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Model(_this10._config, response.data.model));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Returns a model specified by ID\n     * @param {String}     id          The model's id\n     * @return {Promise(Model, error)} A Promise that is fulfilled with an instance of Model or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this11 = this;\n\n      var url = '' + this._config.basePath + replaceVars(MODEL_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Model(_this11._config, response.data.model));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Update a model's or a list of models' output config or concepts\n     * @param {object|object[]}      models                                 Can be a single model object or list of model objects with the following attrs:\n     *   @param {string}               models.id                                    The id of the model to apply changes to (Required)\n     *   @param {string}               models.name                                  The new name of the model to update with\n     *   @param {boolean}              models.conceptsMutuallyExclusive             Do you expect to see more than one of the concepts in this model in the SAME image? Set to false (default) if so. Otherwise, set to true.\n     *   @param {boolean}              models.closedEnvironment                     Do you expect to run the trained model on images that do not contain ANY of the concepts in the model? Set to false (default) if so. Otherwise, set to true.\n     *   @param {object[]}             models.concepts                              An array of concept objects or string\n     *     @param {object|string}        models.concepts[].concept                    If string is given, this is interpreted as concept id. Otherwise, if object is given, client expects the following attributes\n     *       @param {string}             models.concepts[].concept.id                   The id of the concept to attach to the model\n     *   @param {object[]}             models.action                                The action to perform on the given concepts. Possible values are 'merge', 'remove', or 'overwrite'. Default: 'merge'\n     * @return {Promise(Models, error)} A Promise that is fulfilled with an instance of Models or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update(models) {\n      var _this12 = this;\n\n      var url = '' + this._config.basePath + MODELS_PATH;\n      var modelsList = Array.isArray(models) ? models : [models];\n      var data = { models: modelsList.map(formatModel) };\n      data['action'] = models.action || 'merge';\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Models(_this12._config, response.data.models));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Update model by merging concepts\n     * @param {object|object[]}      model                                 Can be a single model object or list of model objects with the following attrs:\n     *   @param {string}               model.id                                    The id of the model to apply changes to (Required)\n     *   @param {object[]}             model.concepts                              An array of concept objects or string\n     *     @param {object|string}        model.concepts[].concept                    If string is given, this is interpreted as concept id. Otherwise, if object is given, client expects the following attributes\n     *       @param {string}             model.concepts[].concept.id                   The id of the concept to attach to the model\n     */\n\n  }, {\n    key: 'mergeConcepts',\n    value: function mergeConcepts() {\n      var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      model.action = 'merge';\n      return this.update(model);\n    }\n\n    /**\n     * Update model by removing concepts\n     * @param {object|object[]}      model                                 Can be a single model object or list of model objects with the following attrs:\n     *   @param {string}               model.id                                    The id of the model to apply changes to (Required)\n     *   @param {object[]}             model.concepts                              An array of concept objects or string\n     *     @param {object|string}        model.concepts[].concept                    If string is given, this is interpreted as concept id. Otherwise, if object is given, client expects the following attributes\n     *       @param {string}             model.concepts[].concept.id                   The id of the concept to attach to the model\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts() {\n      var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      model.action = 'remove';\n      return this.update(model);\n    }\n\n    /**\n     * Update model by overwriting concepts\n     * @param {object|object[]}      model                                 Can be a single model object or list of model objects with the following attrs:\n     *   @param {string}               model.id                                    The id of the model to apply changes to (Required)\n     *   @param {object[]}             model.concepts                              An array of concept objects or string\n     *     @param {object|string}        model.concepts[].concept                    If string is given, this is interpreted as concept id. Otherwise, if object is given, client expects the following attributes\n     *       @param {string}             model.concepts[].concept.id                   The id of the concept to attach to the model\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts() {\n      var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      model.action = 'overwrite';\n      return this.update(model);\n    }\n\n    /**\n     * Deletes all models (if no ids and versionId given) or a model (if given id) or a model version (if given id and verion id)\n     * @param {String|String[]}      ids         Can be a single string or an array of strings representing the model ids\n     * @param {String}               versionId   The model's version id\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(ids) {\n      var versionId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var request = void 0,\n          url = void 0,\n          data = void 0;\n      var id = ids;\n\n      if (checkType(/String/, ids) || checkType(/Array/, ids) && ids.length === 1) {\n        if (versionId) {\n          url = '' + this._config.basePath + replaceVars(MODEL_VERSION_PATH, [id, versionId]);\n        } else {\n          url = '' + this._config.basePath + replaceVars(MODEL_PATH, [id]);\n        }\n        request = wrapToken(this._config, function (headers) {\n          return new Promise(function (resolve, reject) {\n            axios.delete(url, { headers: headers }).then(function (response) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            }, reject);\n          });\n        });\n      } else {\n        if (!ids && !versionId) {\n          url = '' + this._config.basePath + MODELS_PATH;\n          data = { 'delete_all': true };\n        } else if (!versionId && ids.length > 1) {\n          url = '' + this._config.basePath + MODELS_PATH;\n          data = { ids: ids };\n        } else {\n          throw ERRORS.INVALID_DELETE_ARGS;\n        }\n        request = wrapToken(this._config, function (headers) {\n          return new Promise(function (resolve, reject) {\n            axios({\n              method: 'delete',\n              url: url,\n              data: data,\n              headers: headers\n            }).then(function (response) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            }, reject);\n          });\n        });\n      }\n\n      return request;\n    }\n\n    /**\n     * Search for models by name or type\n     * @param {String}     name        The model name\n     * @param {String}     type        This can be \"concept\", \"color\", \"embed\", \"facedetect\", \"cluster\" or \"blur\"\n     * @return {Promise(models, error)} A Promise that is fulfilled with an instance of Models or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search(name) {\n      var _this13 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var url = '' + this._config.basePath + MODEL_SEARCH_PATH;\n      return wrapToken(this._config, function (headers) {\n        var params = {\n          'model_query': {\n            name: name,\n            type: type\n          }\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Models(_this13._config, response.data.models));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Models;\n}();\n\nmodule.exports = Models;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Region.js":
/*!**********************************************!*\
  !*** ./node_modules/clarifai/dist/Region.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Region / bounding box. Region points are percentages from the edge.\n * E.g. top of 0.2 means the cropped input will start 20% down from the original edge.\n * @class\n */\nvar Region = function Region(_config, data) {\n  _classCallCheck(this, Region);\n\n  this.id = data.id;\n  this.top = data.region_info.bounding_box.top_row;\n  this.left = data.region_info.bounding_box.left_col;\n  this.bottom = data.region_info.bounding_box.bottom_row;\n  this.right = data.region_info.bounding_box.right_col;\n};\n\nmodule.exports = Region;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9SZWdpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0RBQWtELDBDQUEwQzs7QUFFNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVmcmlnZXJhdG9yX2FwcC8uL25vZGVfbW9kdWxlcy9jbGFyaWZhaS9kaXN0L1JlZ2lvbi5qcz9hOWFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFJlZ2lvbiAvIGJvdW5kaW5nIGJveC4gUmVnaW9uIHBvaW50cyBhcmUgcGVyY2VudGFnZXMgZnJvbSB0aGUgZWRnZS5cbiAqIEUuZy4gdG9wIG9mIDAuMiBtZWFucyB0aGUgY3JvcHBlZCBpbnB1dCB3aWxsIHN0YXJ0IDIwJSBkb3duIGZyb20gdGhlIG9yaWdpbmFsIGVkZ2UuXG4gKiBAY2xhc3NcbiAqL1xudmFyIFJlZ2lvbiA9IGZ1bmN0aW9uIFJlZ2lvbihfY29uZmlnLCBkYXRhKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWdpb24pO1xuXG4gIHRoaXMuaWQgPSBkYXRhLmlkO1xuICB0aGlzLnRvcCA9IGRhdGEucmVnaW9uX2luZm8uYm91bmRpbmdfYm94LnRvcF9yb3c7XG4gIHRoaXMubGVmdCA9IGRhdGEucmVnaW9uX2luZm8uYm91bmRpbmdfYm94LmxlZnRfY29sO1xuICB0aGlzLmJvdHRvbSA9IGRhdGEucmVnaW9uX2luZm8uYm91bmRpbmdfYm94LmJvdHRvbV9yb3c7XG4gIHRoaXMucmlnaHQgPSBkYXRhLnJlZ2lvbl9pbmZvLmJvdW5kaW5nX2JveC5yaWdodF9jb2w7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZ2lvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Region.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Regions.js":
/*!***********************************************!*\
  !*** ./node_modules/clarifai/dist/Regions.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Region = __webpack_require__(/*! ./Region */ \"(rsc)/./node_modules/clarifai/dist/Region.js\");\n\n/**\n * A collection of regions.\n * @class\n */\n\nvar Regions = function () {\n  function Regions(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Regions);\n\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach(function (regionData, index) {\n      _this[index] = new Region(_this._config, regionData);\n    });\n    this.length = rawData.length;\n  }\n\n  _createClass(Regions, [{\n    key: Symbol.iterator,\n    value: function value() {\n      var _this2 = this;\n\n      var index = -1;\n      return {\n        next: function next() {\n          return { value: _this2[++index], done: index >= _this2.length };\n        }\n      };\n    }\n  }]);\n\n  return Regions;\n}();\n\nmodule.exports = Regions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9SZWdpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlDQUFpQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwrREFBK0QseURBQXlELHFFQUFxRSw2REFBNkQsd0JBQXdCOztBQUVqakIsa0RBQWtELDBDQUEwQzs7QUFFNUYsYUFBYSxtQkFBTyxDQUFDLDhEQUFVOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWZyaWdlcmF0b3JfYXBwLy4vbm9kZV9tb2R1bGVzL2NsYXJpZmFpL2Rpc3QvUmVnaW9ucy5qcz9iNGM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlZ2lvbiA9IHJlcXVpcmUoJy4vUmVnaW9uJyk7XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIHJlZ2lvbnMuXG4gKiBAY2xhc3NcbiAqL1xuXG52YXIgUmVnaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVnaW9ucyhfY29uZmlnKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciByYXdEYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWdpb25zKTtcblxuICAgIHRoaXMuX2NvbmZpZyA9IF9jb25maWc7XG4gICAgdGhpcy5yYXdEYXRhID0gcmF3RGF0YTtcbiAgICByYXdEYXRhLmZvckVhY2goZnVuY3Rpb24gKHJlZ2lvbkRhdGEsIGluZGV4KSB7XG4gICAgICBfdGhpc1tpbmRleF0gPSBuZXcgUmVnaW9uKF90aGlzLl9jb25maWcsIHJlZ2lvbkRhdGEpO1xuICAgIH0pO1xuICAgIHRoaXMubGVuZ3RoID0gcmF3RGF0YS5sZW5ndGg7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVnaW9ucywgW3tcbiAgICBrZXk6IFN5bWJvbC5pdGVyYXRvcixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBfdGhpczJbKytpbmRleF0sIGRvbmU6IGluZGV4ID49IF90aGlzMi5sZW5ndGggfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVnaW9ucztcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWdpb25zOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Regions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Workflow.js":
/*!************************************************!*\
  !*** ./node_modules/clarifai/dist/Workflow.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require.API,\n    replaceVars = _require.replaceVars;\n\nvar WORKFLOWS_PATH = API.WORKFLOWS_PATH,\n    WORKFLOW_PATH = API.WORKFLOW_PATH,\n    WORKFLOW_RESULTS_PATH = API.WORKFLOW_RESULTS_PATH;\n\nvar _require2 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require2.wrapToken,\n    formatInput = _require2.formatInput;\n\nvar _require3 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    checkType = _require3.checkType;\n\n/**\n * class representing a workflow\n * @class\n */\n\n\nvar Workflow = function () {\n  function Workflow(_config) {\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Workflow);\n\n    this._config = _config;\n    this.rawData = rawData;\n    this.id = rawData.id;\n    this.createdAt = rawData.created_at || rawData.createdAt;\n    this.appId = rawData.app_id || rawData.appId;\n  }\n\n  /**\n   * @deprecated\n   */\n\n\n  _createClass(Workflow, [{\n    key: 'create',\n    value: function create(workflowId, config) {\n      var url = '' + this._config.basePath + WORKFLOWS_PATH;\n      var modelId = config.modelId;\n      var modelVersionId = config.modelVersionId;\n      var body = {\n        workflows: [{\n          id: workflowId,\n          nodes: [{\n            id: 'concepts',\n            model: {\n              id: modelId,\n              model_version: {\n                id: modelVersionId\n              }\n            }\n          }]\n        }]\n      };\n\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (response) {\n            var workflowId = response.data.workflows[0].id;\n            resolve(workflowId);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * @deprecated\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(workflowId, config) {\n      var url = '' + this._config.basePath + replaceVars(WORKFLOW_PATH, [workflowId]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.delete(url, {\n            headers: headers\n          }).then(function (response) {\n            var data = response.data;\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Returns workflow output according to inputs\n     * @param {string}                   workflowId    Workflow id\n     * @param {object[]|object|string}   inputs    An array of objects/object/string pointing to an image resource. A string can either be a url or base64 image bytes. Object keys explained below:\n     *    @param {object}                  inputs[].image     Object with keys explained below:\n     *       @param {string}                 inputs[].image.(url|base64)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     * @param {object} config An object with keys explained below.\n     *   @param {float} config.minValue The minimum confidence threshold that a result must meet. From 0.0 to 1.0\n     *   @param {number} config.maxConcepts The maximum number of concepts to return\n     */\n\n  }, {\n    key: 'predict',\n    value: function predict(workflowId, inputs) {\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var url = '' + this._config.basePath + replaceVars(WORKFLOW_RESULTS_PATH, [workflowId]);\n      if (checkType(/(Object|String)/, inputs)) {\n        inputs = [inputs];\n      }\n      return wrapToken(this._config, function (headers) {\n        var params = {\n          inputs: inputs.map(formatInput)\n        };\n        if (config && Object.getOwnPropertyNames(config).length > 0) {\n          params['output_config'] = (0, _utils.formatObjectForSnakeCase)(config);\n        }\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, {\n            headers: headers\n          }).then(function (response) {\n            var data = response.data;\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Workflow;\n}();\n\nmodule.exports = Workflow;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Workflow.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/Workflows.js":
/*!*************************************************!*\
  !*** ./node_modules/clarifai/dist/Workflows.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nvar Workflow = __webpack_require__(/*! ./Workflow */ \"(rsc)/./node_modules/clarifai/dist/Workflow.js\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    API = _require.API,\n    replaceVars = _require.replaceVars;\n\nvar WORKFLOWS_PATH = API.WORKFLOWS_PATH,\n    WORKFLOW_PATH = API.WORKFLOW_PATH;\n\nvar _require2 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require2.wrapToken;\n\nvar _require3 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    isSuccess = _require3.isSuccess;\n\n/**\n * class representing a collection of workflows\n * @class\n */\n\n\nvar Workflows = function () {\n  function Workflows(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Workflows);\n\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach(function (workflowData, index) {\n      _this[index] = new Workflow(_this._config, workflowData);\n    });\n    this.length = rawData.length;\n  }\n\n  /**\n   * Get all workflows in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Workflows, error)} A Promise that is fulfilled with an instance of Workflows or rejected with an error\n   */\n\n\n  _createClass(Workflows, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + WORKFLOWS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              page: options.page,\n              per_page: options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Workflows(_this2._config, response.data.workflows));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'create',\n    value: function create(workflowId, config) {\n      var url = '' + this._config.basePath + WORKFLOWS_PATH;\n      var modelId = config.modelId;\n      var modelVersionId = config.modelVersionId;\n      var body = {\n        workflows: [{\n          id: workflowId,\n          nodes: [{\n            id: 'concepts',\n            model: {\n              id: modelId,\n              model_version: {\n                id: modelVersionId\n              }\n            }\n          }]\n        }]\n      };\n\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (response) {\n            var workflowId = response.data.workflows[0].id;\n            resolve(workflowId);\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'delete',\n    value: function _delete(workflowId) {\n      var url = '' + this._config.basePath + replaceVars(WORKFLOW_PATH, [workflowId]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.delete(url, {\n            headers: headers\n          }).then(function (response) {\n            var data = response.data;\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Workflows;\n}();\n\n;\n\nmodule.exports = Workflows;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9Xb3JrZmxvd3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUNBQWlDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELCtEQUErRCx5REFBeUQscUVBQXFFLDZEQUE2RCx3QkFBd0I7O0FBRWpqQixrREFBa0QsMENBQTBDOztBQUU1RixZQUFZLG1CQUFPLENBQUMsNkRBQU87QUFDM0IsZUFBZSxtQkFBTyxDQUFDLGtFQUFZOztBQUVuQyxlQUFlLG1CQUFPLENBQUMsb0VBQWE7QUFDcEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLDREQUFTO0FBQ2pDOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLGdFQUFXO0FBQ25DOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGVBQWUsV0FBVztBQUMxQixlQUFlLFdBQVc7QUFDMUIsY0FBYywyQkFBMkI7QUFDekM7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBGQUEwRjs7QUFFMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWZyaWdlcmF0b3JfYXBwLy4vbm9kZV9tb2R1bGVzL2NsYXJpZmFpL2Rpc3QvV29ya2Zsb3dzLmpzP2ZjOTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xudmFyIFdvcmtmbG93ID0gcmVxdWlyZSgnLi9Xb3JrZmxvdycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpLFxuICAgIEFQSSA9IF9yZXF1aXJlLkFQSSxcbiAgICByZXBsYWNlVmFycyA9IF9yZXF1aXJlLnJlcGxhY2VWYXJzO1xuXG52YXIgV09SS0ZMT1dTX1BBVEggPSBBUEkuV09SS0ZMT1dTX1BBVEgsXG4gICAgV09SS0ZMT1dfUEFUSCA9IEFQSS5XT1JLRkxPV19QQVRIO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIHdyYXBUb2tlbiA9IF9yZXF1aXJlMi53cmFwVG9rZW47XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKSxcbiAgICBpc1N1Y2Nlc3MgPSBfcmVxdWlyZTMuaXNTdWNjZXNzO1xuXG4vKipcbiAqIGNsYXNzIHJlcHJlc2VudGluZyBhIGNvbGxlY3Rpb24gb2Ygd29ya2Zsb3dzXG4gKiBAY2xhc3NcbiAqL1xuXG5cbnZhciBXb3JrZmxvd3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFdvcmtmbG93cyhfY29uZmlnKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciByYXdEYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXb3JrZmxvd3MpO1xuXG4gICAgdGhpcy5fY29uZmlnID0gX2NvbmZpZztcbiAgICB0aGlzLnJhd0RhdGEgPSByYXdEYXRhO1xuICAgIHJhd0RhdGEuZm9yRWFjaChmdW5jdGlvbiAod29ya2Zsb3dEYXRhLCBpbmRleCkge1xuICAgICAgX3RoaXNbaW5kZXhdID0gbmV3IFdvcmtmbG93KF90aGlzLl9jb25maWcsIHdvcmtmbG93RGF0YSk7XG4gICAgfSk7XG4gICAgdGhpcy5sZW5ndGggPSByYXdEYXRhLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHdvcmtmbG93cyBpbiBhcHBcbiAgICogQHBhcmFtIHtPYmplY3R9ICAgIG9wdGlvbnMgIE9iamVjdCB3aXRoIGtleXMgZXhwbGFpbmVkIGJlbG93OiAob3B0aW9uYWwpXG4gICAqICAgQHBhcmFtIHtOdW1iZXJ9ICAgIG9wdGlvbnMucGFnZSAgVGhlIHBhZ2UgbnVtYmVyIChvcHRpb25hbCwgZGVmYXVsdDogMSlcbiAgICogICBAcGFyYW0ge051bWJlcn0gICAgb3B0aW9ucy5wZXJQYWdlICBOdW1iZXIgb2YgaW1hZ2VzIHRvIHJldHVybiBwZXIgcGFnZSAob3B0aW9uYWwsIGRlZmF1bHQ6IDIwKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlKFdvcmtmbG93cywgZXJyb3IpfSBBIFByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhbiBpbnN0YW5jZSBvZiBXb3JrZmxvd3Mgb3IgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhXb3JrZmxvd3MsIFt7XG4gICAga2V5OiAnbGlzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3QoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHsgcGFnZTogMSwgcGVyUGFnZTogMjAgfTtcblxuICAgICAgdmFyIHVybCA9ICcnICsgdGhpcy5fY29uZmlnLmJhc2VQYXRoICsgV09SS0ZMT1dTX1BBVEg7XG4gICAgICByZXR1cm4gd3JhcFRva2VuKHRoaXMuX2NvbmZpZywgZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBheGlvcy5nZXQodXJsLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgIHBhZ2U6IG9wdGlvbnMucGFnZSxcbiAgICAgICAgICAgICAgcGVyX3BhZ2U6IG9wdGlvbnMucGVyUGFnZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoaXNTdWNjZXNzKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBXb3JrZmxvd3MoX3RoaXMyLl9jb25maWcsIHJlc3BvbnNlLmRhdGEud29ya2Zsb3dzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHdvcmtmbG93SWQsIGNvbmZpZykge1xuICAgICAgdmFyIHVybCA9ICcnICsgdGhpcy5fY29uZmlnLmJhc2VQYXRoICsgV09SS0ZMT1dTX1BBVEg7XG4gICAgICB2YXIgbW9kZWxJZCA9IGNvbmZpZy5tb2RlbElkO1xuICAgICAgdmFyIG1vZGVsVmVyc2lvbklkID0gY29uZmlnLm1vZGVsVmVyc2lvbklkO1xuICAgICAgdmFyIGJvZHkgPSB7XG4gICAgICAgIHdvcmtmbG93czogW3tcbiAgICAgICAgICBpZDogd29ya2Zsb3dJZCxcbiAgICAgICAgICBub2RlczogW3tcbiAgICAgICAgICAgIGlkOiAnY29uY2VwdHMnLFxuICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgaWQ6IG1vZGVsSWQsXG4gICAgICAgICAgICAgIG1vZGVsX3ZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBpZDogbW9kZWxWZXJzaW9uSWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gd3JhcFRva2VuKHRoaXMuX2NvbmZpZywgZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBheGlvcy5wb3N0KHVybCwgYm9keSwge1xuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgd29ya2Zsb3dJZCA9IHJlc3BvbnNlLmRhdGEud29ya2Zsb3dzWzBdLmlkO1xuICAgICAgICAgICAgcmVzb2x2ZSh3b3JrZmxvd0lkKTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUod29ya2Zsb3dJZCkge1xuICAgICAgdmFyIHVybCA9ICcnICsgdGhpcy5fY29uZmlnLmJhc2VQYXRoICsgcmVwbGFjZVZhcnMoV09SS0ZMT1dfUEFUSCwgW3dvcmtmbG93SWRdKTtcbiAgICAgIHJldHVybiB3cmFwVG9rZW4odGhpcy5fY29uZmlnLCBmdW5jdGlvbiAoaGVhZGVycykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGF4aW9zLmRlbGV0ZSh1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBXb3JrZmxvd3M7XG59KCk7XG5cbjtcblxubW9kdWxlLmV4cG9ydHMgPSBXb3JrZmxvd3M7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/Workflows.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/clarifai/dist/constants.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nvar MAX_BATCH_SIZE = 128;\nvar GEO_LIMIT_TYPES = ['withinMiles', 'withinKilometers', 'withinRadians', 'withinDegrees'];\nvar SYNC_TIMEOUT = 360000; // 6 minutes\nvar MODEL_QUEUED_FOR_TRAINING = '21103';\nvar MODEL_TRAINING = '21101';\nvar POLLTIME = 2000;\n\nmodule.exports = {\n  API: {\n    TOKEN_PATH: '/token',\n    MODELS_PATH: '/models',\n    MODEL_PATH: '/models/$0',\n    MODEL_VERSIONS_PATH: '/models/$0/versions',\n    MODEL_VERSION_PATH: '/models/$0/versions/$1',\n    MODEL_PATCH_PATH: '/models/$0/output_info/data/concepts',\n    MODEL_OUTPUT_PATH: '/models/$0/output_info',\n    MODEL_VERSION_OUTPUT_PATH: '/models/$0/versions/$1/output_info',\n    MODEL_SEARCH_PATH: '/models/searches',\n    MODEL_FEEDBACK_PATH: '/models/$0/feedback',\n    MODEL_VERSION_FEEDBACK_PATH: '/models/$0/versions/$1/feedback',\n    PREDICT_PATH: '/models/$0/outputs',\n    VERSION_PREDICT_PATH: '/models/$0/versions/$1/outputs',\n    CONCEPTS_PATH: '/concepts',\n    CONCEPT_PATH: '/concepts/$0',\n    CONCEPT_SEARCH_PATH: '/concepts/searches',\n    MODEL_INPUTS_PATH: '/models/$0/inputs',\n    MODEL_VERSION_INPUTS_PATH: '/models/$0/versions/$1/inputs',\n    MODEL_VERSION_METRICS_PATH: '/models/$0/versions/$1/metrics',\n    INPUTS_PATH: '/inputs',\n    INPUT_PATH: '/inputs/$0',\n    INPUTS_STATUS_PATH: '/inputs/status',\n    SEARCH_PATH: '/searches',\n    SEARCH_FEEDBACK_PATH: '/searches/feedback',\n    WORKFLOWS_PATH: '/workflows',\n    WORKFLOW_PATH: '/workflows/$0',\n    WORKFLOW_RESULTS_PATH: '/workflows/$0/results'\n  },\n  ERRORS: {\n    paramsRequired: function paramsRequired(param) {\n      var paramList = Array.isArray(param) ? param : [param];\n      return new Error('The following ' + (paramList.length > 1 ? 'params are' : 'param is') + ' required: ' + paramList.join(', '));\n    },\n    MAX_INPUTS: new Error('Number of inputs passed exceeded max of ' + MAX_BATCH_SIZE),\n    INVALID_GEOLIMIT_TYPE: new Error('Incorrect geo_limit type. Value must be any of the following: ' + GEO_LIMIT_TYPES.join(', ')),\n    INVALID_DELETE_ARGS: new Error('Wrong arguments passed. You can only delete all models (provide no arguments), delete select models (provide list of ids),\\n    delete a single model (providing a single id) or delete a model version (provide a single id and version id)')\n  },\n  STATUS: {\n    MODEL_QUEUED_FOR_TRAINING: MODEL_QUEUED_FOR_TRAINING,\n    MODEL_TRAINING: MODEL_TRAINING\n  },\n  // var replacement must be given in order\n  replaceVars: function replaceVars(path) {\n    var vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var newPath = path;\n    vars.forEach(function (val, index) {\n      if (index === 0) {\n        val = encodeURIComponent(val);\n      }\n      newPath = newPath.replace(new RegExp('\\\\$' + index, 'g'), val);\n    });\n    return newPath;\n  },\n  getBasePath: function getBasePath() {\n    var apiEndpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'https://api.clarifai.com';\n    var userId = arguments[1];\n    var appId = arguments[2];\n\n    if (!userId || !appId) {\n      return apiEndpoint + '/v2';\n    }\n    return apiEndpoint + '/v2/users/' + userId + '/apps/' + appId;\n  },\n  GEO_LIMIT_TYPES: GEO_LIMIT_TYPES,\n  MAX_BATCH_SIZE: MAX_BATCH_SIZE,\n  SYNC_TIMEOUT: SYNC_TIMEOUT,\n  POLLTIME: POLLTIME\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZnJpZ2VyYXRvcl9hcHAvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9jb25zdGFudHMuanM/MjQ2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBNQVhfQkFUQ0hfU0laRSA9IDEyODtcbnZhciBHRU9fTElNSVRfVFlQRVMgPSBbJ3dpdGhpbk1pbGVzJywgJ3dpdGhpbktpbG9tZXRlcnMnLCAnd2l0aGluUmFkaWFucycsICd3aXRoaW5EZWdyZWVzJ107XG52YXIgU1lOQ19USU1FT1VUID0gMzYwMDAwOyAvLyA2IG1pbnV0ZXNcbnZhciBNT0RFTF9RVUVVRURfRk9SX1RSQUlOSU5HID0gJzIxMTAzJztcbnZhciBNT0RFTF9UUkFJTklORyA9ICcyMTEwMSc7XG52YXIgUE9MTFRJTUUgPSAyMDAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQVBJOiB7XG4gICAgVE9LRU5fUEFUSDogJy90b2tlbicsXG4gICAgTU9ERUxTX1BBVEg6ICcvbW9kZWxzJyxcbiAgICBNT0RFTF9QQVRIOiAnL21vZGVscy8kMCcsXG4gICAgTU9ERUxfVkVSU0lPTlNfUEFUSDogJy9tb2RlbHMvJDAvdmVyc2lvbnMnLFxuICAgIE1PREVMX1ZFUlNJT05fUEFUSDogJy9tb2RlbHMvJDAvdmVyc2lvbnMvJDEnLFxuICAgIE1PREVMX1BBVENIX1BBVEg6ICcvbW9kZWxzLyQwL291dHB1dF9pbmZvL2RhdGEvY29uY2VwdHMnLFxuICAgIE1PREVMX09VVFBVVF9QQVRIOiAnL21vZGVscy8kMC9vdXRwdXRfaW5mbycsXG4gICAgTU9ERUxfVkVSU0lPTl9PVVRQVVRfUEFUSDogJy9tb2RlbHMvJDAvdmVyc2lvbnMvJDEvb3V0cHV0X2luZm8nLFxuICAgIE1PREVMX1NFQVJDSF9QQVRIOiAnL21vZGVscy9zZWFyY2hlcycsXG4gICAgTU9ERUxfRkVFREJBQ0tfUEFUSDogJy9tb2RlbHMvJDAvZmVlZGJhY2snLFxuICAgIE1PREVMX1ZFUlNJT05fRkVFREJBQ0tfUEFUSDogJy9tb2RlbHMvJDAvdmVyc2lvbnMvJDEvZmVlZGJhY2snLFxuICAgIFBSRURJQ1RfUEFUSDogJy9tb2RlbHMvJDAvb3V0cHV0cycsXG4gICAgVkVSU0lPTl9QUkVESUNUX1BBVEg6ICcvbW9kZWxzLyQwL3ZlcnNpb25zLyQxL291dHB1dHMnLFxuICAgIENPTkNFUFRTX1BBVEg6ICcvY29uY2VwdHMnLFxuICAgIENPTkNFUFRfUEFUSDogJy9jb25jZXB0cy8kMCcsXG4gICAgQ09OQ0VQVF9TRUFSQ0hfUEFUSDogJy9jb25jZXB0cy9zZWFyY2hlcycsXG4gICAgTU9ERUxfSU5QVVRTX1BBVEg6ICcvbW9kZWxzLyQwL2lucHV0cycsXG4gICAgTU9ERUxfVkVSU0lPTl9JTlBVVFNfUEFUSDogJy9tb2RlbHMvJDAvdmVyc2lvbnMvJDEvaW5wdXRzJyxcbiAgICBNT0RFTF9WRVJTSU9OX01FVFJJQ1NfUEFUSDogJy9tb2RlbHMvJDAvdmVyc2lvbnMvJDEvbWV0cmljcycsXG4gICAgSU5QVVRTX1BBVEg6ICcvaW5wdXRzJyxcbiAgICBJTlBVVF9QQVRIOiAnL2lucHV0cy8kMCcsXG4gICAgSU5QVVRTX1NUQVRVU19QQVRIOiAnL2lucHV0cy9zdGF0dXMnLFxuICAgIFNFQVJDSF9QQVRIOiAnL3NlYXJjaGVzJyxcbiAgICBTRUFSQ0hfRkVFREJBQ0tfUEFUSDogJy9zZWFyY2hlcy9mZWVkYmFjaycsXG4gICAgV09SS0ZMT1dTX1BBVEg6ICcvd29ya2Zsb3dzJyxcbiAgICBXT1JLRkxPV19QQVRIOiAnL3dvcmtmbG93cy8kMCcsXG4gICAgV09SS0ZMT1dfUkVTVUxUU19QQVRIOiAnL3dvcmtmbG93cy8kMC9yZXN1bHRzJ1xuICB9LFxuICBFUlJPUlM6IHtcbiAgICBwYXJhbXNSZXF1aXJlZDogZnVuY3Rpb24gcGFyYW1zUmVxdWlyZWQocGFyYW0pIHtcbiAgICAgIHZhciBwYXJhbUxpc3QgPSBBcnJheS5pc0FycmF5KHBhcmFtKSA/IHBhcmFtIDogW3BhcmFtXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSBmb2xsb3dpbmcgJyArIChwYXJhbUxpc3QubGVuZ3RoID4gMSA/ICdwYXJhbXMgYXJlJyA6ICdwYXJhbSBpcycpICsgJyByZXF1aXJlZDogJyArIHBhcmFtTGlzdC5qb2luKCcsICcpKTtcbiAgICB9LFxuICAgIE1BWF9JTlBVVFM6IG5ldyBFcnJvcignTnVtYmVyIG9mIGlucHV0cyBwYXNzZWQgZXhjZWVkZWQgbWF4IG9mICcgKyBNQVhfQkFUQ0hfU0laRSksXG4gICAgSU5WQUxJRF9HRU9MSU1JVF9UWVBFOiBuZXcgRXJyb3IoJ0luY29ycmVjdCBnZW9fbGltaXQgdHlwZS4gVmFsdWUgbXVzdCBiZSBhbnkgb2YgdGhlIGZvbGxvd2luZzogJyArIEdFT19MSU1JVF9UWVBFUy5qb2luKCcsICcpKSxcbiAgICBJTlZBTElEX0RFTEVURV9BUkdTOiBuZXcgRXJyb3IoJ1dyb25nIGFyZ3VtZW50cyBwYXNzZWQuIFlvdSBjYW4gb25seSBkZWxldGUgYWxsIG1vZGVscyAocHJvdmlkZSBubyBhcmd1bWVudHMpLCBkZWxldGUgc2VsZWN0IG1vZGVscyAocHJvdmlkZSBsaXN0IG9mIGlkcyksXFxuICAgIGRlbGV0ZSBhIHNpbmdsZSBtb2RlbCAocHJvdmlkaW5nIGEgc2luZ2xlIGlkKSBvciBkZWxldGUgYSBtb2RlbCB2ZXJzaW9uIChwcm92aWRlIGEgc2luZ2xlIGlkIGFuZCB2ZXJzaW9uIGlkKScpXG4gIH0sXG4gIFNUQVRVUzoge1xuICAgIE1PREVMX1FVRVVFRF9GT1JfVFJBSU5JTkc6IE1PREVMX1FVRVVFRF9GT1JfVFJBSU5JTkcsXG4gICAgTU9ERUxfVFJBSU5JTkc6IE1PREVMX1RSQUlOSU5HXG4gIH0sXG4gIC8vIHZhciByZXBsYWNlbWVudCBtdXN0IGJlIGdpdmVuIGluIG9yZGVyXG4gIHJlcGxhY2VWYXJzOiBmdW5jdGlvbiByZXBsYWNlVmFycyhwYXRoKSB7XG4gICAgdmFyIHZhcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXG4gICAgdmFyIG5ld1BhdGggPSBwYXRoO1xuICAgIHZhcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpbmRleCkge1xuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHZhbCA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuICAgICAgfVxuICAgICAgbmV3UGF0aCA9IG5ld1BhdGgucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcJCcgKyBpbmRleCwgJ2cnKSwgdmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3UGF0aDtcbiAgfSxcbiAgZ2V0QmFzZVBhdGg6IGZ1bmN0aW9uIGdldEJhc2VQYXRoKCkge1xuICAgIHZhciBhcGlFbmRwb2ludCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2h0dHBzOi8vYXBpLmNsYXJpZmFpLmNvbSc7XG4gICAgdmFyIHVzZXJJZCA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgYXBwSWQgPSBhcmd1bWVudHNbMl07XG5cbiAgICBpZiAoIXVzZXJJZCB8fCAhYXBwSWQpIHtcbiAgICAgIHJldHVybiBhcGlFbmRwb2ludCArICcvdjInO1xuICAgIH1cbiAgICByZXR1cm4gYXBpRW5kcG9pbnQgKyAnL3YyL3VzZXJzLycgKyB1c2VySWQgKyAnL2FwcHMvJyArIGFwcElkO1xuICB9LFxuICBHRU9fTElNSVRfVFlQRVM6IEdFT19MSU1JVF9UWVBFUyxcbiAgTUFYX0JBVENIX1NJWkU6IE1BWF9CQVRDSF9TSVpFLFxuICBTWU5DX1RJTUVPVVQ6IFNZTkNfVElNRU9VVCxcbiAgUE9MTFRJTUU6IFBPTExUSU1FXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/helpers.js":
/*!***********************************************!*\
  !*** ./node_modules/clarifai/dist/helpers.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nvar SUCCESS_CODES = [200, 201];\n\nmodule.exports = {\n  isSuccess: function isSuccess(response) {\n    return SUCCESS_CODES.indexOf(response.status) > -1;\n  },\n  deleteEmpty: function deleteEmpty(obj) {\n    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    Object.keys(obj).forEach(function (key) {\n      if (obj[key] === null || obj[key] === undefined || strict === true && (obj[key] === '' || obj[key].length === 0 || Object.keys(obj[key]).length === 0)) {\n        delete obj[key];\n      }\n    });\n  },\n  clone: function clone(obj) {\n    var keys = Object.keys(obj);\n    var copy = {};\n    keys.forEach(function (k) {\n      copy[k] = obj[k];\n    });\n    return copy;\n  },\n  checkType: function checkType(regex, val) {\n    if (regex instanceof RegExp === false) {\n      regex = new RegExp(regex);\n    }\n    return regex.test(Object.prototype.toString.call(val));\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVmcmlnZXJhdG9yX2FwcC8uL25vZGVfbW9kdWxlcy9jbGFyaWZhaS9kaXN0L2hlbHBlcnMuanM/NTdjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBTVUNDRVNTX0NPREVTID0gWzIwMCwgMjAxXTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3VjY2VzczogZnVuY3Rpb24gaXNTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIFNVQ0NFU1NfQ09ERVMuaW5kZXhPZihyZXNwb25zZS5zdGF0dXMpID4gLTE7XG4gIH0sXG4gIGRlbGV0ZUVtcHR5OiBmdW5jdGlvbiBkZWxldGVFbXB0eShvYmopIHtcbiAgICB2YXIgc3RyaWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAob2JqW2tleV0gPT09IG51bGwgfHwgb2JqW2tleV0gPT09IHVuZGVmaW5lZCB8fCBzdHJpY3QgPT09IHRydWUgJiYgKG9ialtrZXldID09PSAnJyB8fCBvYmpba2V5XS5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMob2JqW2tleV0pLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBjbG9uZTogZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBjb3B5ID0ge307XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBjb3B5W2tdID0gb2JqW2tdO1xuICAgIH0pO1xuICAgIHJldHVybiBjb3B5O1xuICB9LFxuICBjaGVja1R5cGU6IGZ1bmN0aW9uIGNoZWNrVHlwZShyZWdleCwgdmFsKSB7XG4gICAgaWYgKHJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwID09PSBmYWxzZSkge1xuICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkpO1xuICB9XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/clarifai/dist/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar App = __webpack_require__(/*! ./App */ \"(rsc)/./node_modules/clarifai/dist/App.js\");\n\nvar _require = __webpack_require__(/*! ./../package.json */ \"(rsc)/./node_modules/clarifai/package.json\"),\n    version = _require.version;\n\nmodule.exports = global.Clarifai = {\n  version: version,\n  App: App,\n  GENERAL_MODEL: 'aaa03c23b3724a16a56b629203edc62c',\n  FOOD_MODEL: 'bd367be194cf45149e75f01d59f77ba7',\n  TRAVEL_MODEL: 'eee28c313d69466f836ab83287a54ed9',\n  NSFW_MODEL: 'e9576d86d2004ed1a38ba0cf39ecb4b1',\n  WEDDINGS_MODEL: 'c386b7a870114f4a87477c0824499348',\n  WEDDING_MODEL: 'c386b7a870114f4a87477c0824499348',\n  COLOR_MODEL: 'eeed0b6733a644cea07cf4c60f87ebb7',\n  CLUSTER_MODEL: 'cccbe437d6e54e2bb911c6aa292fb072',\n  FACE_DETECT_MODEL: 'a403429f2ddf4b49b307e318f00e528b',\n  FOCUS_MODEL: 'c2cf7cecd8a6427da375b9f35fcd2381',\n  LOGO_MODEL: 'c443119bf2ed4da98487520d01a0b1e3',\n  DEMOGRAPHICS_MODEL: 'c0c0ac362b03416da06ab3fa36fb58e3',\n  GENERAL_EMBED_MODEL: 'bbb5f41425b8468d9b7a554ff10f8581',\n  FACE_EMBED_MODEL: 'd02b4508df58432fbb84e800597b8959',\n  APPAREL_MODEL: 'e0be3b9d6a454f0493ac3a30784001ff',\n  MODERATION_MODEL: 'd16f390eb32cad478c7ae150069bd2c6',\n  TEXTURES_AND_PATTERNS: 'fbefb47f9fdb410e8ce14f24f54b47ff',\n  LANDSCAPE_QUALITY: 'bec14810deb94c40a05f1f0eb3c91403',\n  PORTRAIT_QUALITY: 'de9bd05cfdbf4534af151beb2a5d0953',\n  CELEBRITY_MODEL: 'e466caa0619f444ab97497640cefc4dc'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixVQUFVLG1CQUFPLENBQUMsd0RBQU87O0FBRXpCLGVBQWUsbUJBQU8sQ0FBQyxxRUFBbUI7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVmcmlnZXJhdG9yX2FwcC8uL25vZGVfbW9kdWxlcy9jbGFyaWZhaS9kaXN0L2luZGV4LmpzPzRhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXBwID0gcmVxdWlyZSgnLi9BcHAnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi8uLi9wYWNrYWdlLmpzb24nKSxcbiAgICB2ZXJzaW9uID0gX3JlcXVpcmUudmVyc2lvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuQ2xhcmlmYWkgPSB7XG4gIHZlcnNpb246IHZlcnNpb24sXG4gIEFwcDogQXBwLFxuICBHRU5FUkFMX01PREVMOiAnYWFhMDNjMjNiMzcyNGExNmE1NmI2MjkyMDNlZGM2MmMnLFxuICBGT09EX01PREVMOiAnYmQzNjdiZTE5NGNmNDUxNDllNzVmMDFkNTlmNzdiYTcnLFxuICBUUkFWRUxfTU9ERUw6ICdlZWUyOGMzMTNkNjk0NjZmODM2YWI4MzI4N2E1NGVkOScsXG4gIE5TRldfTU9ERUw6ICdlOTU3NmQ4NmQyMDA0ZWQxYTM4YmEwY2YzOWVjYjRiMScsXG4gIFdFRERJTkdTX01PREVMOiAnYzM4NmI3YTg3MDExNGY0YTg3NDc3YzA4MjQ0OTkzNDgnLFxuICBXRURESU5HX01PREVMOiAnYzM4NmI3YTg3MDExNGY0YTg3NDc3YzA4MjQ0OTkzNDgnLFxuICBDT0xPUl9NT0RFTDogJ2VlZWQwYjY3MzNhNjQ0Y2VhMDdjZjRjNjBmODdlYmI3JyxcbiAgQ0xVU1RFUl9NT0RFTDogJ2NjY2JlNDM3ZDZlNTRlMmJiOTExYzZhYTI5MmZiMDcyJyxcbiAgRkFDRV9ERVRFQ1RfTU9ERUw6ICdhNDAzNDI5ZjJkZGY0YjQ5YjMwN2UzMThmMDBlNTI4YicsXG4gIEZPQ1VTX01PREVMOiAnYzJjZjdjZWNkOGE2NDI3ZGEzNzViOWYzNWZjZDIzODEnLFxuICBMT0dPX01PREVMOiAnYzQ0MzExOWJmMmVkNGRhOTg0ODc1MjBkMDFhMGIxZTMnLFxuICBERU1PR1JBUEhJQ1NfTU9ERUw6ICdjMGMwYWMzNjJiMDM0MTZkYTA2YWIzZmEzNmZiNThlMycsXG4gIEdFTkVSQUxfRU1CRURfTU9ERUw6ICdiYmI1ZjQxNDI1Yjg0NjhkOWI3YTU1NGZmMTBmODU4MScsXG4gIEZBQ0VfRU1CRURfTU9ERUw6ICdkMDJiNDUwOGRmNTg0MzJmYmI4NGU4MDA1OTdiODk1OScsXG4gIEFQUEFSRUxfTU9ERUw6ICdlMGJlM2I5ZDZhNDU0ZjA0OTNhYzNhMzA3ODQwMDFmZicsXG4gIE1PREVSQVRJT05fTU9ERUw6ICdkMTZmMzkwZWIzMmNhZDQ3OGM3YWUxNTAwNjliZDJjNicsXG4gIFRFWFRVUkVTX0FORF9QQVRURVJOUzogJ2ZiZWZiNDdmOWZkYjQxMGU4Y2UxNGYyNGY1NGI0N2ZmJyxcbiAgTEFORFNDQVBFX1FVQUxJVFk6ICdiZWMxNDgxMGRlYjk0YzQwYTA1ZjFmMGViM2M5MTQwMycsXG4gIFBPUlRSQUlUX1FVQUxJVFk6ICdkZTliZDA1Y2ZkYmY0NTM0YWYxNTFiZWIyYTVkMDk1MycsXG4gIENFTEVCUklUWV9NT0RFTDogJ2U0NjZjYWEwNjE5ZjQ0NGFiOTc0OTc2NDBjZWZjNGRjJ1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/solutions/Moderation.js":
/*!************************************************************!*\
  !*** ./node_modules/clarifai/dist/solutions/Moderation.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n\nvar _require = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/clarifai/dist/utils.js\"),\n    wrapToken = _require.wrapToken;\n\nvar _require2 = __webpack_require__(/*! ../helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    isSuccess = _require2.isSuccess,\n    clone = _require2.clone;\n\nvar BASE_URL = 'https://api.clarifai-moderation.com';\n\nvar Moderation = function () {\n  function Moderation(_config) {\n    _classCallCheck(this, Moderation);\n\n    this._config = _config;\n  }\n\n  _createClass(Moderation, [{\n    key: 'predict',\n    value: function predict(modelID, imageURL) {\n      return wrapToken(this._config, function (headers) {\n        var url = BASE_URL + '/v2/models/' + modelID + '/outputs';\n        var params = {\n          inputs: [{\n            data: {\n              image: {\n                url: imageURL\n              }\n            }\n          }]\n        };\n\n        return new Promise(function (resolve, reject) {\n          return axios.post(url, params, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var data = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'getModerationStatus',\n    value: function getModerationStatus(imageID) {\n      return wrapToken(this._config, function (headers) {\n        var url = BASE_URL + '/v2/inputs/' + imageID + '/outputs';\n        return new Promise(function (resolve, reject) {\n          return axios.get(url, { headers: headers }).then(function (response) {\n            var data = clone(response.data);\n            resolve(data);\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Moderation;\n}();\n\nmodule.exports = Moderation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9zb2x1dGlvbnMvTW9kZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQ0FBaUMsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsK0RBQStELHlEQUF5RCxxRUFBcUUsNkRBQTZELHdCQUF3Qjs7QUFFampCLGtEQUFrRCwwQ0FBMEM7O0FBRTVGLFlBQVksbUJBQU8sQ0FBQyw2REFBTzs7QUFFM0IsZUFBZSxtQkFBTyxDQUFDLDZEQUFVO0FBQ2pDOztBQUVBLGdCQUFnQixtQkFBTyxDQUFDLGlFQUFZO0FBQ3BDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0EsMkNBQTJDLGtCQUFrQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msa0JBQWtCO0FBQ3BEO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVmcmlnZXJhdG9yX2FwcC8uL25vZGVfbW9kdWxlcy9jbGFyaWZhaS9kaXN0L3NvbHV0aW9ucy9Nb2RlcmF0aW9uLmpzP2QzMzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlscycpLFxuICAgIHdyYXBUb2tlbiA9IF9yZXF1aXJlLndyYXBUb2tlbjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKSxcbiAgICBpc1N1Y2Nlc3MgPSBfcmVxdWlyZTIuaXNTdWNjZXNzLFxuICAgIGNsb25lID0gX3JlcXVpcmUyLmNsb25lO1xuXG52YXIgQkFTRV9VUkwgPSAnaHR0cHM6Ly9hcGkuY2xhcmlmYWktbW9kZXJhdGlvbi5jb20nO1xuXG52YXIgTW9kZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTW9kZXJhdGlvbihfY29uZmlnKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGVyYXRpb24pO1xuXG4gICAgdGhpcy5fY29uZmlnID0gX2NvbmZpZztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RlcmF0aW9uLCBbe1xuICAgIGtleTogJ3ByZWRpY3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVkaWN0KG1vZGVsSUQsIGltYWdlVVJMKSB7XG4gICAgICByZXR1cm4gd3JhcFRva2VuKHRoaXMuX2NvbmZpZywgZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgICAgICAgdmFyIHVybCA9IEJBU0VfVVJMICsgJy92Mi9tb2RlbHMvJyArIG1vZGVsSUQgKyAnL291dHB1dHMnO1xuICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgIGlucHV0czogW3tcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgaW1hZ2U6IHtcbiAgICAgICAgICAgICAgICB1cmw6IGltYWdlVVJMXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QodXJsLCBwYXJhbXMsIHsgaGVhZGVyczogaGVhZGVycyB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKGlzU3VjY2VzcyhyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBjbG9uZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNb2RlcmF0aW9uU3RhdHVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kZXJhdGlvblN0YXR1cyhpbWFnZUlEKSB7XG4gICAgICByZXR1cm4gd3JhcFRva2VuKHRoaXMuX2NvbmZpZywgZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgICAgICAgdmFyIHVybCA9IEJBU0VfVVJMICsgJy92Mi9pbnB1dHMvJyArIGltYWdlSUQgKyAnL291dHB1dHMnO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHJldHVybiBheGlvcy5nZXQodXJsLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gY2xvbmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGVyYXRpb247XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kZXJhdGlvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/solutions/Moderation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/solutions/Solutions.js":
/*!***********************************************************!*\
  !*** ./node_modules/clarifai/dist/solutions/Solutions.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Moderation = __webpack_require__(/*! ./Moderation */ \"(rsc)/./node_modules/clarifai/dist/solutions/Moderation.js\");\n\nvar Solutions = function Solutions(_config) {\n  _classCallCheck(this, Solutions);\n\n  this.moderation = new Moderation(_config);\n};\n\nmodule.exports = Solutions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2xhcmlmYWkvZGlzdC9zb2x1dGlvbnMvU29sdXRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtEQUFrRCwwQ0FBMEM7O0FBRTVGLGlCQUFpQixtQkFBTyxDQUFDLGdGQUFjOztBQUV2QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWZyaWdlcmF0b3JfYXBwLy4vbm9kZV9tb2R1bGVzL2NsYXJpZmFpL2Rpc3Qvc29sdXRpb25zL1NvbHV0aW9ucy5qcz9mMzhlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIE1vZGVyYXRpb24gPSByZXF1aXJlKCcuL01vZGVyYXRpb24nKTtcblxudmFyIFNvbHV0aW9ucyA9IGZ1bmN0aW9uIFNvbHV0aW9ucyhfY29uZmlnKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb2x1dGlvbnMpO1xuXG4gIHRoaXMubW9kZXJhdGlvbiA9IG5ldyBNb2RlcmF0aW9uKF9jb25maWcpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2x1dGlvbnM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/solutions/Solutions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/dist/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/clarifai/dist/utils.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Promise = __webpack_require__(/*! promise */ \"(rsc)/./node_modules/promise/index.js\");\nvar validUrl = __webpack_require__(/*! valid-url */ \"(rsc)/./node_modules/valid-url/index.js\");\n\nvar _require = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/clarifai/dist/constants.js\"),\n    GEO_LIMIT_TYPES = _require.GEO_LIMIT_TYPES,\n    ERRORS = _require.ERRORS;\n\nvar _require2 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/clarifai/dist/helpers.js\"),\n    checkType = _require2.checkType,\n    clone = _require2.clone;\n\nvar _require3 = __webpack_require__(/*! ./../package.json */ \"(rsc)/./node_modules/clarifai/package.json\"),\n    VERSION = _require3.version;\n\nmodule.exports = {\n  wrapToken: function wrapToken(_config, requestFn) {\n    return new Promise(function (resolve, reject) {\n      if (_config.apiKey) {\n        var headers = {\n          Authorization: 'Key ' + _config.apiKey,\n          'X-Clarifai-Client': 'js:' + VERSION\n        };\n        return requestFn(headers).then(resolve, reject);\n      }\n      if (_config.sessionToken) {\n        var _headers = {\n          'X-Clarifai-Session-Token': _config.sessionToken,\n          'X-Clarifai-Client': 'js:' + VERSION\n        };\n        return requestFn(_headers).then(resolve, reject);\n      }\n      _config.token().then(function (token) {\n        var headers = {\n          Authorization: 'Bearer ' + token.accessToken,\n          'X-Clarifai-Client': 'js:' + VERSION\n        };\n        requestFn(headers).then(resolve, reject);\n      }, reject);\n    });\n  },\n  formatModel: function formatModel() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var formatted = {};\n    if (data.id === null || data.id === undefined) {\n      throw ERRORS.paramsRequired('Model ID');\n    }\n    formatted.id = data.id;\n    if (data.name) {\n      formatted.name = data.name;\n    }\n    formatted.output_info = {};\n    if (data.conceptsMutuallyExclusive !== undefined) {\n      formatted.output_info.output_config = formatted.output_info.output_config || {};\n      formatted.output_info.output_config.concepts_mutually_exclusive = !!data.conceptsMutuallyExclusive;\n    }\n    if (data.closedEnvironment !== undefined) {\n      formatted.output_info.output_config = formatted.output_info.output_config || {};\n      formatted.output_info.output_config.closed_environment = !!data.closedEnvironment;\n    }\n    if (data.concepts) {\n      formatted.output_info.data = {\n        concepts: data.concepts.map(module.exports.formatConcept)\n      };\n    }\n    return formatted;\n  },\n  formatInput: function formatInput(data, includeImage) {\n    var input = checkType(/String/, data) ? { url: data } : data;\n    var formatted = {\n      id: input.id || null,\n      data: {}\n    };\n    if (input.concepts) {\n      formatted.data.concepts = input.concepts;\n    }\n    if (input.metadata) {\n      formatted.data.metadata = input.metadata;\n    }\n    if (input.geo) {\n      formatted.data.geo = { geo_point: input.geo };\n    }\n    if (input.regions) {\n      formatted.data.regions = input.regions;\n    }\n    if (includeImage !== false) {\n      formatted.data.image = {\n        url: input.url,\n        base64: input.base64,\n        crop: input.crop\n      };\n      if (data.allowDuplicateUrl) {\n        formatted.data.image.allow_duplicate_url = true;\n      }\n    }\n    return formatted;\n  },\n  formatMediaPredict: function formatMediaPredict(data) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image';\n\n    var media = void 0;\n    if (checkType(/String/, data)) {\n      if (validUrl.isWebUri(data)) {\n        media = {\n          url: data\n        };\n      } else {\n        media = {\n          base64: data\n        };\n      }\n    } else {\n      media = Object.assign({}, data);\n    }\n\n    // Users can specify their own id to distinguish batch results\n    var id = void 0;\n    if (media.id) {\n      id = media.id;\n      delete media.id;\n    }\n\n    var object = {\n      data: _defineProperty({}, type, media)\n    };\n\n    if (id) {\n      object.id = id;\n    }\n\n    return object;\n  },\n  formatImagesSearch: function formatImagesSearch(image) {\n    var imageQuery = void 0;\n    var input = { input: { data: {} } };\n    var formatted = [];\n    if (checkType(/String/, image)) {\n      imageQuery = { url: image };\n    } else {\n      imageQuery = image.url || image.base64 ? {\n        image: {\n          url: image.url,\n          base64: image.base64,\n          crop: image.crop\n        }\n      } : {};\n    }\n\n    input.input.data = imageQuery;\n    if (image.id) {\n      input.input.id = image.id;\n      input.input.data = { image: {} };\n      if (image.crop) {\n        input.input.data.image.crop = image.crop;\n      }\n    }\n    if (image.metadata !== undefined) {\n      input.input.data.metadata = image.metadata;\n    }\n    if (image.geo !== undefined) {\n      if (checkType(/Array/, image.geo)) {\n        input.input.data.geo = {\n          geo_box: image.geo.map(function (p) {\n            return { geo_point: p };\n          })\n        };\n      } else if (checkType(/Object/, image.geo)) {\n        if (GEO_LIMIT_TYPES.indexOf(image.geo.type) === -1) {\n          throw ERRORS.INVALID_GEOLIMIT_TYPE;\n        }\n        input.input.data.geo = {\n          geo_point: {\n            latitude: image.geo.latitude,\n            longitude: image.geo.longitude\n          },\n          geo_limit: {\n            type: image.geo.type,\n            value: image.geo.value\n          }\n        };\n      }\n    }\n    if (image.type !== 'input' && input.input.data.image) {\n      if (input.input.data.metadata || input.input.data.geo) {\n        var dataCopy = { input: { data: clone(input.input.data) } };\n        var imageCopy = { input: { data: clone(input.input.data) } };\n        delete dataCopy.input.data.image;\n        delete imageCopy.input.data.metadata;\n        delete imageCopy.input.data.geo;\n        input = [{ output: imageCopy }, dataCopy];\n      } else {\n        input = [{ output: input }];\n      }\n    }\n    formatted = formatted.concat(input);\n    return formatted;\n  },\n  formatConcept: function formatConcept(concept) {\n    var formatted = concept;\n    if (checkType(/String/, concept)) {\n      formatted = {\n        id: concept\n      };\n    }\n    return formatted;\n  },\n  formatConceptsSearch: function formatConceptsSearch(query) {\n    if (checkType(/String/, query)) {\n      query = { id: query };\n    }\n    var v = {};\n    var type = query.type === 'input' ? 'input' : 'output';\n    delete query.type;\n    v[type] = {\n      data: {\n        concepts: [query]\n      }\n    };\n    return v;\n  },\n  formatObjectForSnakeCase: function formatObjectForSnakeCase(obj) {\n    return Object.keys(obj).reduce(function (o, k) {\n      o[k.replace(/([A-Z])/g, function (r) {\n        return '_' + r.toLowerCase();\n      })] = obj[k];\n      return o;\n    }, {});\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/clarifai/dist/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/clarifai/package.json":
/*!********************************************!*\
  !*** ./node_modules/clarifai/package.json ***!
  \********************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"clarifai","version":"2.9.1","description":"Official Clarifai Javascript SDK","main":"dist/index.js","repository":"https://github.com/Clarifai/clarifai-javascript","author":"Clarifai Inc.","license":"Apache-2.0","scripts":{"jsdoc":"jsdoc src/* -t node_modules/minami -d docs/$npm_package_version && jsdoc src/* -t node_modules/minami -d docs/latest","test":"gulp test","unittest":"gulp unittest","watch":"gulp watch","build":"npm run clean && gulp build && npm run jsdoc","release":"release-it","clean":"gulp cleanbuild"},"dependencies":{"axios":">=0.11.1 <2","promise":"^7.1.1","valid-url":"^1.0.9"},"devDependencies":{"axios-mock-adapter":"^1.16.0","babel-eslint":"^6.1.2","babel-preset-es2015":"^6.14.0","babel-register":"^6.14.0","babelify":"^7.3.0","del":"^2.0.2","envify":"^3.4.0","gulp":"^3.9.1","gulp-babel":"^6.1.2","gulp-browserify":"^0.5.1","gulp-eslint":"^2.0.0","gulp-insert":"^0.5.0","gulp-jasmine":"^4.0.0","gulp-notify":"2.2.0","gulp-rename":"^1.2.2","gulp-replace-task":"^0.11.0","gulp-uglify":"^1.4.1","gulp-util":"^3.0.6","jsdoc":"^3.4.1","minami":"^1.1.1","release-it":"^2.9.0"}}');

/***/ })

};
;